module.exports = {
  '655a0b95-dce4-41f8-a38c-bf62027258b0': {
    id: '655a0b95-dce4-41f8-a38c-bf62027258b0',
    timestamp: 1532746800000,
    title: 'How not to be a mediocre developer!',
    summary:
      'Disclaimer: I am not the best developer but I appreciate and reason the differences which make some developers stand out from the rest.',
    body:
      '## Write more¬†code\n\nIf you want to get better at something then you have to spend time doing that thing, there is no other way sadly. No matter how many articles you read, how many times you read the docs, you will not improve unless you put your hands and mind in action. That design pattern which seemed hard to implement at the start will seem like a cake walk after you have practiced it‚Äôs use in multiple contexts.\n\n<img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F102h4wsmCG2s12%2F200.gif&key=a19fcc184b9711e1b4764040d3dc5c07" width="100%" >\n\n# Incorporate tests\n\nWhen I first started writing tests for my own code, I was amazed to see the mindset I was lacking for writing good tests. Writing tests will enable you to look at your code the way you did not imagine at first because when coming up with tests you have to think about how can this thing break and you realise you were doing too many things in that function you wrote and it might be better to split into multiple functions because it‚Äôs hard to come up with a test for a function which does multiple things.\n\nLet see an example below\n```\nfunction postData(data) {  \n boolean valid = true;  \n // check if data is defined  \n if (data === undefined) {  \n   valid = false;  \n }\n\n// check if email is well formed  \n if (!regex(data\\[\'email\'\\]) {  \n   valid = false;  \n }\n\n// check if password is atleast 8 chars.  \n if (data\\[\'password\'\\].length < 8) {  \n   valid = false;  \n }\n\nif (valid) {  \n  http  \n   .post(\\`example.com/user/create\\`, data)  \n   .then((response) => {  \n    //append to the list  \n    this.users.append(response.userid);  \n   })  \n   .catch((error) => {  \n    // show errors.  \n   });  \n } else {  \n   showValidationError();  \n }  \n}\n```\nSo the method `postData` is doing multiple things such as validating the data, appending to the users list when the promise is resolved and handling errors. Writing unit test for `postData` will be difficult and messy. You can break it into multiple methods and test each method separately for e.g.\n```\nfunction postData(data) {  \n return http  \n   .post(\\`example.com/user/create\\`, data);  \n}\n\nfunction validate(data) {  \n // check if data is defined  \n if (data === undefined) {  \n   return false;  \n }\n\n// check if email is well formed  \n if (!regex(data\\[\'email\'\\]) {  \n   return false;  \n }\n\n// check if password is atleast 8 chars.  \n if (data\\[\'password\'\\].length >= 8) {  \n   return false;  \n }\n\n  return true;  \n}\n\nfunction appendUsers(userId) {  \n  this.users.append(response.userid);  \n}\n\nfunction main() {  \n if (validate(data)) {  \n  postData(data)  \n   .then(data => appendToList(data.userId))  \n   .catch(error => handleError(error))  \n } else {  \n  showValidationError();  \n }  \n}\n```\nYou can already see why writing tests leads to a better quality code, you had to split your long method into multiple smaller units and each single unit can be tested atomically.\n\n# Be honest\n\nBe honest about what you know thoroughly and what you don‚Äôt. Pretending that you know the in‚Äôs and out‚Äôs of an API will never help you improve and infact you might lose face in a discussion if you happen to say something stupid because of your lack of knowledge about an API or a topic.\n\n# Contribute to open¬†source\n\nContributing to open source can expose you to scenarios which might never occur at work and thus limiting your horizons. You can learn what it takes to run a project in a distributed scenario, introducing non breaking changes and other new open source tools etc, the benefits are endless and we all know how open source has changed everyone‚Äôs lives directly and indirectly.\n\n<img src="https://cdn-images-1.medium.com/max/1600/0*fjHQQbHkSW5YwU90" width="100%">\n\nby [rawpixel](https://unsplash.com/@rawpixel?utm_source=medium&utm_medium=referral) on¬†[Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)\n\n## Be open to¬†help\n\nHelping others for something you know makes you a ‚Äúgoto‚Äù person for that concept/feature/API and thus stemming your value and importance in the team. Be open to help for stuff you might not be the best at, you might end up learning something valuable from the experience.\n\n## Pick a personal¬†project\n\nPersonal project‚Äôs are a great way to learn new frameworks and technologies which you might not experience at work. With your personal project you are the product manager, you are the developer and the architect, so you can imagine the amount of decision making you will have to do. You can use the experience from your project and suggest new frameworks and tools at work or in your community and shine like a ‚≠êÔ∏è\n\n## Lower your¬†ego\n\nDon‚Äôt let your ego and your job title come in between the way of your learning/improvement. Care less about who you are and more about what you are becoming every day. An architect in a `xyz` organisation might be a software developer in some other organisation. Always be open to new and different ways of doing the thing you think you are great at. You might loose on a more efficient algorithm or a better design for a feature.\n\n<img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F9Xh1CGm4Hzo4g%2Fgiphy.gif&key=a19fcc184b9711e1b4764040d3dc5c07" width="100%">\n\ndon‚Äôt be the kanye in your team\n\n## Understand the¬†‚Äúwhy‚Äù\n\nBefore accepting and stemming your belief in a new framework or a pattern or an API try understanding that ‚Äúwhy‚Äù does it exists at first place. Try getting to the intuition of the very existence of a concept.\n```\nvar app = new Vue({  \n  el: \'#app\',  \n  data: {  \n    message: \'Hello Vue!\'  \n  }  \n})\n```\nAbove is the first code example you come across on the [vue.js](https://vuejs.org/v2/guide/) docs site. Even when I am looking at this very basic example I am trying to reason out the below things in my head:\n\n*   Why a `new` keyword for creating the component¬†? Why don‚Äôt they have a factory pattern for creating objects¬†?\n*   Seems like `el` property takes the `id` of the element and why does it uses `#`¬†? Does that mean I can add other element selectors as well such as attribute and class¬†?\n*   `data` seems like a very generic property name of the `vue` object, what is it trying to represent exactly?\n\nNot saying that you should be critical to this extent for everything but developing this habit helps understand the philosophy of things better and thus improving your understanding.\n\n## Don‚Äôt be¬†lazy\n\nLaziness can come in your way to showcase your skills or the things you care about for e.g. if you believe a refactor will improve the performance then go ahead and do it, add comments to save other developers‚Äô time, document the new API you have built. Time added by you in your code is equal to time saved for the other developer who is trying to make sense of what you have written.\n\n\n<img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FFdWU4HtO5vTGw%2Fgiphy.gif&key=a19fcc184b9711e1b4764040d3dc5c07" width="100%">\n\n## Solve coding challenges\n\nSolving coding challenges forces you to think about stuff which we take for granted in our routine. I am talking about space and time complexity of our code. Some people argue that it‚Äôs not practical to solve challenges since most of the things are abstracted and you are just gonna use the API.\n\nBut I disagree! Not only does it help you look at the code critically but also it enables you with the confidence of coming up with the best possible code in terms of performance and another benefit is that you will always be prepared for that interview üòâ\n\nSome of the sites for solving challenges are [hackerrank](http://hackerrank.com), [leetcode](http://leetcode.com), [topcoder](https://www.topcoder.com/) and [spoj](https://www.spoj.com/).\n\n## Encourage the good¬†stuff\n\nIf you have liked your colleague‚Äôs commit then don‚Äôt hesitate to drop a message and appreciate or upvote that answer that helped you on stackoverflow or clap for the article on medium which gave you free wisdom or star that interesting project you checked out on github. Encouraging others helps bring the best out of them and eventually you also.\n\n## Do not hide behind the¬†layer\n\nYou found an issue with the API which you are consuming in your view but you cannot fix it because you are a ‚Äúfront-end developer‚Äù. It is a bad attitude to have in my opinion. The basic principles of programming such as keeping the code DRY, using abstractions if you see multiple use-cases for your classes, catching exceptions for all flow control paths, etc. apply to almost every layer of the stack. Keeping the basic principles in mind, it might help you solve issues which you thought you cannot touch because you don‚Äôt work on that part of the codebase.\n\n<img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fl0MYFPAHLoJ9I6IM0%2Fgiphy.gif&key=a19fcc184b9711e1b4764040d3dc5c07" width="100%">\n\nfont: https://hackernoon.com/how-not-to-be-a-mediocre-developer-c59a49f97fc5',
    author: 'Dushyant Sabharwal',
    category: 'javascript',
    voteScore: 920,
    deleted: false,
    commentCount: 2,
  },
  '563505f0-7ea0-4a56-9cbe-32a08dcc6b8a': {
    id: '563505f0-7ea0-4a56-9cbe-32a08dcc6b8a',
    timestamp: 1479002400000,
    title: 'Use ES7 Object Rest Operator to Omit Properties',
    summary: '',
    body:
      '![](https://cdn-images-1.medium.com/max/1600/1*VtR7xSOCAJkqsOv9IL2KNA.png)\n\nI was perusing the [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript/blob/master/README.md#objects--rest-spread) today when I came across an intriguing pattern that cleverly uses the ES7 Object Rest Spread operator to omit properties from an object.\n\nReady? Here it is:\n```\nconst myObject = {  \n  a: 1,  \n  b: 2,  \n  c: 3  \n};  \nconst { a, ...noA } = myObject;\n\nconsole.log(noA); // => { b: 2, c: 3 }\n```\nThis confused me at first, so I‚Äôll explain. We are using [Object Destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) in conjunction with the [Object Rest Spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator) to separate our large `myObject` into separate parts `a` and `noA`.\n\n![](https://cdn-images-1.medium.com/max/1600/1*wV15allsqjmKsyLEFs1gVg.gif)\n\nIt‚Äôs essentially creating two new `const` variables and storing separate parts of our object in them. The rest operator tells the script to put any other not explicitly defined property in the last variable. So all we have to do is destructure all the properties we don‚Äôt want‚Ää‚Äî‚Ää`a`‚Ää‚Äî‚Ääso we are left with just the properties we do want stored in our last variable‚Ää‚Äî‚Ää`noA`.\n\n> ‚ÄúPerfection is achieved¬†‚Ä¶ when there is nothing left to take away.‚Äù‚Ää‚Äî‚ÄäAntoine de Saint¬†Exup√©ry\n\nWhat‚Äôs especially great about this pattern is, unlike `delete`, we aren‚Äôt mutating the original object, `myObject`, nor are we removing the reference `a`, so we can rest assured we haven‚Äôt accidentally broken something that is using `myObject` or `a`.\n\nfont: https://codeburst.io/use-es2015-object-rest-operator-to-omit-properties-38a3ecffe90',
    author: 'Mark Brouch',
    category: 'javascript',
    voteScore: 123,
    deleted: false,
    commentCount: 2,
  },
  '60f2a10b-101d-48f3-9117-a70381592f68': {
    id: '60f2a10b-101d-48f3-9117-a70381592f68',
    timestamp: 1530327600000,
    title:
      'The most important lessons I‚Äôve learned after a year of working with¬†React',
    summary: '',
    body:
      '![](https://cdn-images-1.medium.com/max/2000/1*TheYckj9udF4qLjoJW8sjg.png)\n\nNo, I didn‚Äôt wrote that, but I know it got your attention üî™\n\nStarting out with a new technology can be quite troublesome. You usually find yourself in a sea of tutorials and articles, followed by millions of personal opinions. And every single one states that they found the **‚Äúright and perfect way.‚Äù**\n\nThis leaves us debating whether our chosen tutorial will be a waste of time or not.\n\nBefore diving into the ocean, we must understand the underlying concepts of a technology. Then we need to develop a technology-based mindset. If we are starting to learn React, we first have to think in React. Only later on we can start mixing various mindsets into one.\n\nIn this article we‚Äôll be covering some lessons I learned regarding this mindset from my personal experiences with React. We‚Äôll go over the days at work and nights with personal projects and even the talk I gave at a local JavaScript event.\n\nSo let‚Äôs go!\n\n### React is evolving, so you must be up to¬†date\n\nIf you remember the initial announcement of version 16.3.0, you‚Äôll remember how excited everyone was.\n\nHere are some of the changes and improvements we received:\n\n*   Official Context API\n*   createRef API\n*   forwardRef API\n*   StrictMode\n*   Component Lifecycle Changes\n\nThe React Core team and all the contributors are doing a great job trying to improve the technology we all adore. And in version 16.4.0 we received [Pointer Events](https://reactjs.org/blog/2018/05/23/react-v-16-4.html).\n\nFurther changes are surely coming, and it‚Äôs only a matter of time: Async Rendering, Caching, version 17.0.0 and many others not yet known.\n\nSo if you want to be at the top, you have to be up to date with things that are happening in the community.\n\nKnow how things work and why they are being developed. Learn what problems are being solved and how development is being made easier. It‚Äôll really help you out.\n\n### Don‚Äôt be afraid to split your code into smaller¬†chucks\n\nReact is component-based. So you should leverage this concept and not be afraid to split bigger pieces into smaller ones.\n\nSometimes a simple component can be made of 4‚Äì5 lines of code, and in some cases, it is totally fine.\n\nMake it so that if a new person jumps in, they won‚Äôt need days to understand how everything works.\n```\n// isn\'t this easy to understand?\n\nreturn (  \n  \\[  \n   <ChangeButton  \n    onClick={this.changeUserApprovalStatus}  \n    text="Let‚Äôs switch it!"  \n   />,  \n   <UserInformation status={status}/>   \n  \\]  \n);\n```\nYou don‚Äôt have to make components that all have complex logic built-in. They can be only visual. If this improves code readability and testing, and reduces further code smells, it‚Äôs a great win for everyone on the team.\n```\nimport ErrorMessage from \'./ErrorMessage\';\n\nconst NotFound = () => (  \n  <ErrorMessage  \n    title="Oops! Page not found."  \n    message="The page you are looking for does not exist!"  \n    className="test\\_404-page"  \n  />  \n);\n```\nIn the above example, the properties are static. So we can have a pure component which is responsible for the website‚Äôs error message `Not Found`, and nothing more.\n\nAlso, if you don‚Äôt like having CSS classes as class names everywhere, I would recommend using styled components. This can improve readability quite a lot.\n```\nconst Number = styled.h1\\`  \n  font-size: 36px;  \n  line-height: 40px;  \n  margin-right: 5px;  \n  padding: 0px;  \n\\`;  \n//..\n\n<Container>  \n  <Number>{skipRatePre}</Number>  \n  <InfoName>Skip Rate</InfoName>  \n</Container>\n```\nIf you‚Äôre afraid of creating more components because of polluting your folders with files, rethink how you structure your code. I have been using the [fractal structure](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af) and it‚Äôs awesome.\n\n### Don‚Äôt stick to the basics‚Ää‚Äî‚Ääbecome¬†advanced\n\nYou might think sometimes that you don‚Äôt understand something enough to move on to the advanced stuff. But often times you shouldn‚Äôt worry about it too much‚Ää‚Äî‚Äätake up the challenge and prove yourself wrong.\n\nBy taking up the advanced topics and pushing yourself, you can understand more of the basics and how they are used for bigger things.\n\nThere are many patterns which are yours to explore:\n\n*   Compound Components\n*   High Order Components\n*   Render Props\n*   Smart/Dumb Components\n*   many others (try out Profiling)\n\nExplore them all, and you‚Äôll know why and where they are used. You‚Äôll become more comfortable with React.\n```\n// looks like magic?  \n// it\'s not that hard when you just try\n\nrender() {  \n  const children = React.Children.map(this.props.children,  \n   (child, index) => {  \n      return React.cloneElement(child, {  \n        onSelect: () => this.props.onTabSelect(index)  \n    });      \n });    \n return children;  \n}\n```\nAlso, don‚Äôt be afraid to try something new at your work‚Ää‚Äî‚Ääwithin certain boundaries, of course! Don‚Äôt just experiment on personal projects.\n\nPeople will ask questions, and that is normal. Your task is to defend your work and decisions with strong arguments.\n\nYour aim should be to solve an existing problem, make further development easier, or just clean some pasta in the code. Even if your suggestions are rejected, you‚Äôll go home knowing more than by sitting silent.\n\n### Don‚Äôt over-complicate things\n\nThis might sound like a counter argument, but it‚Äôs different. In life, and everywhere, we must have balance. We shouldn‚Äôt over-engineer to show off. We must be practical. Write code which is easy to understand and fulfills its purpose.\n\nIf you don‚Äôt need Redux, but you want to use it because everyone uses without knowing it‚Äôs true purpose, don‚Äôt. Have an opinion and don‚Äôt be afraid to stand up for yourself if others push you.\n\nSometimes you might think that by leveraging the latest technologies and writing complex code you‚Äôre saying to the world:  \n‚ÄúI‚Äôm not a junior, I am becoming a mid/senior. Look what can I do!‚Äù\n\nTo be honest, that was my mindset in the beginning of my developer journey. But over time you understand that the code which was written without showing off or because ‚Äúit works‚Äù is easier to live with.\n\n1.  Co-workers can work on your projects and you‚Äôre not the only person who‚Äôs responsible for developing / fixing / testing <**insert task>.**\n2.  The team can understand what others did without sitting through a long meeting. A couple of minutes is enough to discuss.\n3.  When your colleague goes out for a two week vacation, you can take over their task. And you won‚Äôt have to work on it for 8 hours, because it can be done in an hour.\n\nPeople respect people who make other people‚Äôs lives easier. Thus if your goal is to gain respect, move up the ranks, and improve, aim to code for the team and not yourself.\n\nYou‚Äôll become everyone‚Äôs favorite team player.\n\n### Refactor, refactor and refactor‚Ää‚Äî‚Ääit‚Äôs¬†normal\n\nYou will change your mind dozens of times, although the project manager will change theirs more often. Others will criticize your work, and you will criticize it. As a result, you‚Äôll have to change your code many, many times.\n\nBut don‚Äôt worry, it‚Äôs a natural learning process. Without faults and errors we cannot improve.\n\nThe more times we fall down, the easier it becomes to get back up.\n\nBut here‚Äôs a hint: make sure you test your current software. Smoke, unit, integration, snapshot‚Ää‚Äî‚Äädon‚Äôt be shy of them.\n\nEveryone has faced or will face a scenario when a test could have saved precious time.\n\nAnd if you, like many people, think that they are a waste of time, just try thinking a little different.\n\n1.  You won‚Äôt have to sit with your colleague explaining how things work.\n2.  You won‚Äôt have to sit with your colleague explaining why things broke.\n3.  You won‚Äôt have to fix bugs for your colleague.\n4.  You won‚Äôt have to fix bugs which were found after 3 weeks.\n5.  You will have time to do stuff you want.\n\nAnd these are quite big benefits.\n\n### If you love it, you‚Äôll¬†thrive\n\nOver the previous year, my goal was to get better at React. I wanted to give a talk about it. I wanted others to enjoy it with me.\n\nI could sit all night coding non-stop, watching various talks and enjoying every minute of it.\n\nThe thing is, if you want something, somehow everyone starts helping you. And last month, I gave my first React talk to a crowd of 200 people.\n\nDuring this year period I became stronger and more comfortable with React‚Ää‚Äî‚Ääthe various patterns, paradigms, and inner workings. I can have advanced discussions and teach others about topics that I was afraid to touch.\n\nAnd today I still feel the same excitement and enjoyment I felt a year ago.\n\nTherefore I would recommend everyone to ask themselves: ‚ÄúDo you enjoy what you do?‚Äù\n\nIf not, continue looking for that special piece which you can talk about for hours, learn about every night, and be happy.\n\nBecause we have to find something that is closest to our hearts. Success cannot be forced, it must be achieved.\n\nIf I could go back a year in time, this is what would I say to myself to prepare before the big journey ahead.\n\nThank you for reading!\n\nIf you found this article helpful, üëèüëèüëè.\n\nfont: https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981',
    author: 'Tomas Eglinskas Tom',
    category: 'react',
    voteScore: 432,
    deleted: false,
    commentCount: 0,
  },
  'ed4f9f20-e835-4f71-a327-75da7fb0800f': {
    id: 'ed4f9f20-e835-4f71-a327-75da7fb0800f',
    timestamp: 1526612400000,
    title: 'What exactly is¬†Node.js?',
    summary:
      'Node.js is a JavaScript run-time environment. Sounds great, but what does that mean? How does that work?',
    body:
      'The Node run-time environment includes everything you need to execute a program written in JavaScript.\n\n![](https://cdn-images-1.medium.com/max/1600/1*sYPllpcAZLHmpuQSRPuO0Q.png)\n\nIf you know Java, here‚Äôs a little¬†analogy.\n\nNode.js came into existence when the original developers of JavaScript extended it from something you could only run in the browser to something you could run on your machine as a standalone application.\n\nNow you can do much more with JavaScript than just making websites interactive.\n\nJavaScript now has the capability to do things that other scripting languages like Python can do.\n\nBoth your browser JavaScript and Node.js run on the V8 JavaScript runtime engine. This engine takes your JavaScript code and converts it into a faster machine code. Machine code is low level code which the computer can run without needing to first interpret it.\n\n### Why Node.js?\n\nHere‚Äôs a formal definition as given on the official Node.js [website](https://nodejs.org/en/):\n\n> Node.js¬Æ is a JavaScript runtime built on [Chrome‚Äôs V8 JavaScript engine](https://developers.google.com/v8/).\n\n> Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.\n\n> Node.js‚Äô package ecosystem, [npm](https://www.npmjs.com/), is the largest ecosystem of open source libraries in the world.\n\nWe already discussed the first line of this definition: ‚ÄúNode.js¬Æ is a JavaScript runtime built on Chrome‚Äôs V8 JavaScript engine.‚Äù Now let‚Äôs understand the other two lines so we can find out why Node.js is so popular.\n\nI/O refers to input/output. It can be anything ranging from reading/writing local files to making an HTTP request to an API.\n\nI/O takes time and hence blocks other functions.\n\nConsider a scenario where we request a backend database for the details of user1 and user2 and then print them on the screen/console. The response to this request takes time, but both of the user data requests can be carried out independently and at the same time.\n\n![](https://cdn-images-1.medium.com/freeze/max/60/1*B_UCsFOPfRDKO8ovHpxphg.png?q=20)\n\n![](https://cdn-images-1.medium.com/max/1600/1*B_UCsFOPfRDKO8ovHpxphg.png)\n\n![](https://cdn-images-1.medium.com/max/1600/1*B_UCsFOPfRDKO8ovHpxphg.png)\n\nBlocking I/O (left) vs Non-Blocking I/O¬†(right)\n\n### Blocking I/O\n\nIn the blocking method, user2\'s data request is not initiated until user1\'s data is printed to the screen.\n\nIf this was a web server, we would have to start a new thread for every new user. But JavaScript is single-threaded (not really, but it has a single-threaded event loop, which we‚Äôll discuss a bit later). So this would make JavaScript not very well suited for multi-threaded tasks.\n\nThat‚Äôs where the non-blocking part comes in.\n\n### Non-blocking I/O\n\nOn the other hand using a non-blocking request, you can initiate a data request for user2 without waiting for the response the request for user1. You can initiate both requests in parallel.\n\nThis non-blocking I/O eliminates the need for multi-threading, since the server can handle multiple requests at the same time.\n\n### The JavaScript event¬†loop\n\nIf you have 26 minutes, watch this excellent video explanation of the Node Event Loop:\n\n![](https://i.embed.ly/1/display/resize?url=https%3A%2F%2Fi.ytimg.com%2Fvi%2F8aGhZQkoFbQ%2Fhqdefault.jpg&key=a19fcc184b9711e1b4764040d3dc5c07&width=40)\n\nOtherwise, here‚Äôs a quick step-by-step explanation of how the JavaScript Event Loop works.\n\n![](https://cdn-images-1.medium.com/freeze/max/60/1*BBlPbUjGVtfSPd7BHa1LHw.png?q=20)\n\n![](https://cdn-images-1.medium.com/max/1600/1*BBlPbUjGVtfSPd7BHa1LHw.png)\n\n![](https://cdn-images-1.medium.com/max/1600/1*BBlPbUjGVtfSPd7BHa1LHw.png)\n\nImage Credits: Andrew Mead‚Äôs¬†[course](https://www.udemy.com/the-complete-nodejs-developer-course-2/)\n\n1.  Push `main()` onto the call stack.\n2.  Push `console.log()` onto the call stack. This then runs right away, and gets popped.\n3.  Push `setTimeout(2000)` onto the stack. `setTimeout(2000)` is a Node API. When we call it, we register the event-callback pair. The event will wait 2000 milliseconds, then callback is the function.\n4.  After registering it in the APIs, `setTimeout(2000)` gets popped from the call stack.\n5.  Now the second `setTimeout(0)` gets registered in the same way. We now have two Node APIs waiting to execute.\n6.  After waiting for 0 seconds, `setTimeout(0)` gets moved to the callback queue, and the same thing happens with `setTimeout(2000)`.\n7.  In the callback queue, the functions wait for the call stack to be empty, because only one statement can execute a time.This is taken care of by the event loop.\n8.  The last `console.log()` runs, and the `main()` gets popped from the call stack.\n9.  The event loop sees that the call stack is empty and the callback queue is not empty. So it moves the callbacks (in a first-in-first-out order) to the call stack for execution.\n\n### npm\n\n![](https://cdn-images-1.medium.com/freeze/max/60/0*A47ZVKudfCOCBbyx.png?q=20)\n\n![](https://cdn-images-1.medium.com/max/1600/0*A47ZVKudfCOCBbyx.png)\n\n![](https://cdn-images-1.medium.com/max/1600/0*A47ZVKudfCOCBbyx.png)\n\nThese are libraries built by the awesome community which will solve most of your generic problems. npm (Node package manager) has packages you can use in your apps to make your development faster and efficient.\n\n### Require\n\nRequire does three things:\n\n*   It loads modules that come bundled with Node.js like file system and HTTP from the [Node.js API](http://nodejs.org/api/)¬†.\n*   It loads third party libraries like Express and Mongoose that you install from npm.\n*   It lets you require your own files and modularize the project.\n\nRequire is a function, and it accepts a parameter ‚Äúpath‚Äù and returns `module.exports`.\n\n### Node Modules\n\nA Node module is a reusable block of code whose existence does not accidentally impact other code.\n\nYou can write your own modules and use it in various application. Node.js has a set of built-in modules which you can use without any further installation.\n\n### V8 turbo-charges JavaScript by leveraging C++\n\nV8 is an open source runtime engine written in C++.\n\nJavaScript -> V8(C++) -> Machine Code\n\nV8 implements a script called ECMAScript as specified in ECMA-262. ECMAScript was created by Ecma International to standardize JavaScript.\n\nV8 can run standalone, or can be embedded into any C++ application. It has hooks that allow you to write your own C++ code that you can make available to JavaScript.\n\nThis essentially lets you to add features to JavaScript by embedding V8 into your C++ code so that your C++ code understands more than what the ECMAScript standard otherwise specifies.\n\n### Events\n\nSomething that has happened in our app that we can respond to. There are two types to events in Node.\n\n*   System Events: C++ core from a library called libuv. (For example, finished reading a file).\n*   Custom Events: JavaScript core.\n\n### Writing Hello World in¬†Node.js\n\nWe have to do this, don‚Äôt we?\n\nMake a file app.js and add the following to it.\n\nconsole.log("Hello World!");\n\nOpen your node terminal, change the directory to the folder where the file is saved and run `node app.js`.\n\nBam‚Ää‚Äî‚Ääyou‚Äôve just written Hello World in Node.js.\n\nThere are a ton of resources you can use learn more about Node.js, including [freeCodeCamp.org](https://www.freecodecamp.org/).\n\nfont: https://medium.freecodecamp.org/what-exactly-is-node-js-ae36e97449f5',
    author: 'Priyesh Patel',
    category: 'node',
    voteScore: 34,
    deleted: false,
    commentCount: 0,
  },
  'abe39d0d-78b3-4db4-ae4a-3bc3102ea5eb': {
    id: 'abe39d0d-78b3-4db4-ae4a-3bc3102ea5eb',
    timestamp: 1491102000000,
    title:
      'Before you bury yourself in packages, learn the Node.js runtime¬†itself',
    summary:
      'This article will challenge the very limits of your Node.js knowledge.',
    body:
      'I started learning Node.js shortly after Ryan Dahl first [presented](https://www.youtube.com/watch?v=ztspvPYybIY) it, and I wasn‚Äôt able to answer a lot of the questions I ask in this article even a year ago. If you can truly answer all of these questions, then your knowledge of Node.js is beyond great. We should be friends.\n\nThe reason I think this challenge will take you by surprise is that many of us have been mostly learning Node the wrong way. Most tutorials, books, and courses about Node focus on the Node ecosystem‚Ää‚Äî‚Äänot the Node runtime itself. They focus on teaching what can be done with all the packages available for you when you work with Node, like Express and Socket.IO, rather than teaching the capabilities of the Node runtime itself.\n\nThere are good reasons for this. Node is raw and flexible. It doesn‚Äôt provide complete solutions, but rather provides a rich runtime that enables you to implement solutions of your own. Libraries like Express.js and Socket.IO are more of complete solutions, so it makes more sense to teach those libraries, so you can enable learners to use these complete solutions.\n\nThe conventional wisdom seems to be that only those whose job is to write libraries like Express.js and Socket.IO need to understand everything about the Node.js runtime. But I think this is wrong. A solid understanding of the Node.js runtime itself is the best thing you can do before using those complete solutions. You should at least have the knowledge and confidence to judge a package by its code, so you can make an educated decision about using it.\n\nThis is why I decided to create a [Pluralsight course](https://www.pluralsight.com/courses/nodejs-advanced) fully dedicated to pure Node. While doing the research for the course, I put together a list of specific questions for you to determine whether your knowledge of the Node runtime is already strong enough, or if it could be improved.\n\nIf you can answer most of these questions and you‚Äôre looking for a job, let me know! If on the other hand, most of these questions take you by surprise, you just need to make learning the Node runtime itself a priority. Your knowledge of that will make you a much more desirable developer.\n\n### The Node.js knowledge challenge:\n\nSome of these questions are short and easy while others require longer answers and deeper knowledge. They are all presented here in no particular order.\n\nI know that you‚Äôre going to want answers after reading this list. The advice section below has some answers, but I‚Äôll also be answering all of these questions in a series of freeCodeCamp articles after this one. But let me tease your knowledge first!\n\n1.  What is the relationship between Node.js and V8? Can Node work without V8?\n2.  How come when you declare a global variable in any Node.js file it‚Äôs not really global to all modules?\n3.  When exporting the API of a Node module, why can we sometimes use `exports` and other times we have to use `module.exports`?\n4.  Can we require local files without using relative paths?\n5.  Can different versions of the same package be used in the same application?\n6.  What is the Event Loop? Is it part of V8?\n7.  What is the Call Stack? Is it part of V8?\n8.  What is the difference between `setImmediate` and `process.nextTick`?\n9.  How do you make an asynchronous function return a value?\n10.  Can callbacks be used with promises or is it one way or the other?\n11.  What Node module is implemented by most other Node modules?\n12.  What are the major differences between `spawn`, `exec`, and `fork`?\n13.  How does the cluster module work? How is it different than using a load balancer?\n14.  What are the `--harmony-*` flags?\n15.  How can you read and inspect the memory usage of a Node.js process?\n16.  What will Node do when both the call stack and the event loop queue are empty?\n17.  What are V8 object and function templates?\n18.  What is libuv and how does Node.js use it?\n19.  How can you make Node‚Äôs REPL always use JavaScript strict mode?\n20.  What is `process.argv`? What type of data does it hold?\n21.  How can we do one final operation before a Node process exits? Can that operation be done asynchronously?\n22.  What are some of the built-in dot commands that you can use in Node‚Äôs REPL?\n23.  Besides V8 and libuv, what other external dependencies does Node have?\n24.  What‚Äôs the problem with the process `uncaughtException` event? How is it different than the `exit` event?\n25.  What does the `_` mean inside of Node‚Äôs REPL?\n26.  Do Node buffers use V8 memory? Can they be resized?\n27.  What‚Äôs the difference between `Buffer.alloc` and `Buffer.allocUnsafe`?\n28.  How is the `slice` method on buffers different from that on arrays?\n29.  What is the `string_decoder` module useful for? How is it different than casting buffers to strings?\n30.  What are the 5 major steps that the require function does?\n31.  How can you check for the existence of a local module?\n32.  What is the `main` property in `package.json` useful for?\n33.  What are circular modular dependencies in Node and how can they be avoided?\n34.  What are the 3 file extensions that will be automatically tried by the require function?\n35.  When creating an http server and writing a response for a request, why is the `end()` function required?\n36.  When is it ok to use the file system `*Sync` methods?\n37.  How can you print only one level of a deeply nested object?\n38.  What is the `node-gyp` package used for?\n39.  The objects `exports`, `require`, and `module` are all globally available in every module but they are different in every module. How?\n40.  If you execute a node script file that has the single line: `console.log(arguments);`, what exactly will node print?\n41.  How can a module be both requirable by other modules and executable directly using the `node` command?\n42.  What‚Äôs an example of a built-in stream in Node that is both readable and writable?\n43.  What happens when the line cluster.fork() gets executed in a Node script?\n44.  What‚Äôs the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?\n45.  What is the `console.time` function useful for?\n46.  What‚Äôs the difference between the Paused and the Flowing modes of readable streams?\n47.  What does the `--inspect` argument do for the node command?\n48.  How can you read data from a connected socket?\n49.  The `require` function always caches the module it requires. What can you do if you need to execute the code in a required module many times?\n50.  When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?\n\n### My take on the best way to learn the Node.js¬†runtime\n\nLearning Node.js can be challenging. Here are some of the guidelines that I hope will help along that journey:\n\n#### Learn the good parts of JavaScript and learn its modern syntax (ES2015 and¬†beyond)\n\nNode is a set of libraries on top of a VM engine which can compile JavaScript so it goes without saying that the important skills for JavaScript itself is a subset of the important skills for Node. You should start with JavaScript itself.\n\nDo you understand functions, [scopes](https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7#.2h7c9bt6l), binding, this keyword, new keyword, [closures](https://medium.freecodecamp.com/whats-a-javascript-closure-in-plain-english-please-6a1fc1d2ff1c#.fs8bxulzo), classes, module patterns, prototypes, callbacks, and promises? Are you aware of the various methods that can be used on Numbers, Strings, Arrays, Sets, Objects, and Maps? Getting yourself comfortable with the items on this list will make learning the Node API much easier. For example, trying to learn the ‚Äòfs‚Äô module methods before you have a good understanding of callbacks may lead to unnecessary confusion.\n\n#### Understand the non-blocking nature of¬†Node\n\nCallbacks and promises (and generators/async patterns) are especially important for Node. You need to understand how asynchronous operations are first class in Node.\n\nYou can compare the non-blocking nature of lines of code in a Node program to the way you order a Starbucks coffee (in the store, not the drive-thru):\n\n1.  Place your order | Give Node some instructions to execute (a function)\n2.  Customize your order, no whipped cream for example | Give the function some arguments: `({whippedCream: false})`\n3.  Give the Starbucks worker your name with the order | Give Node a callback with your function: `({whippedCream: false}, callback)`\n4.  Step aside and the Starbucks worker will take orders from people who were after you in line | Node will take instructions from lines after yours.\n5.  When your order is ready, the Starbucks worker will call your name and give you your order | When your function is computed and Node.js has a ready result for you, it‚Äôll call your callback with that result: `callback(result)`\n\nI‚Äôve written a blog post about this: [Asynchronous Programming as Seen at Starbucks](https://edgecoders.com/asynchronous-programming-as-seen-at-starbucks-fc242cf16aa#.mx2cxr3hi)\n\n### Learn the JavaScript concurrency model and how it is based on an event¬†loop\n\nThere is a Stack, a Heap, and a Queue. You can read books on this subject and still not understand it completely, but I guarantee you‚Äôll do if you watch [this guy](https://www.youtube.com/watch?v=8aGhZQkoFbQ).\n\n<iframe width="1120" height="630" src="https://www.youtube.com/embed/8aGhZQkoFbQ?rel=0&amp;controls=0&amp;showinfo=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>\n\nPhilip explains the Event Loop that‚Äôs in the browser, but almost the exact same thing applies to Node.js (there are some differences).\n\n#### Understand how a Node process never sleeps, and will exit when there is nothing left to¬†do\n\nA Node process can be idle but it never sleeps. It keeps track of all the callbacks that are pending and if there is nothing left to execute it will simply exit. To keep a Node process running you can for example use a `setInterval` function because that would create a permanent pending callback in the Event Loop.\n\n#### Learn the global variables that you can use like process, module, and¬†Buffer\n\nThey‚Äôre all defined on a global variable (which is usually compared to the `window` variable in browsers). In a Node‚Äôs REPL, type `global.` and hit tab to see all the items available (or simple double-tab on an empty line). Some of these items are JavaScript structures (like `Array` and `Object`). Some of them are Node library functions (like `setTimeout`, or `console` to print to `stdout`/`stderr`), and some of them are Node global objects that you can use for certain tasks (for example, `process.env` can be used to read the host environment variables).\n\n![](https://cdn-images-1.medium.com/max/2000/1*6ejru9JVwgJ9iGxBYpysJw.png)\n\nYou need to understand most of what you see in that list.\n\n#### Learn what you can do with the built-in libraries that ship with Node and how they have a focus on ‚Äúnetworking‚Äù\n\nSome of those will feel familiar, like _Timers_ for example, because they also exist in the browser and Node is simulating that environment. However, there is much more to learn, like `fs`, `path`, `readline`, `http`, `net`, `stream`, `cluster`,¬†... (The auto-complete list above has them all).\n\nFor example, you can read/write files with `fs`, you can run a streaming-ready web server using ‚Äú`http`‚Äù, and you can run a tcp server and program sockets with ‚Äú`net`‚Äù. Node today is so much more powerful than it was just a year ago, and it‚Äôs getting better by the commit. Before you look for a package to do some task, make sure that you can‚Äôt do that task with the built-in Node packages first.\n\nThe `events` library is especially important because most of Node architecture is event-driven.\n\nThere‚Äôs always [more that you can learn about the Node API](https://nodejs.org/api/all.html), so keep expanding your horizons.\n\n#### Understand why Node is named¬†Node\n\nYou build simple single-process building blocks (nodes) that can be organized with good networking protocols to have them communicate with each other and scale up to build large distributed programs. Scaling a Node application is not an afterthought‚Ää‚Äî‚Ääit‚Äôs built right into the name.\n\n#### Read and try to understand some code written for¬†Node\n\nPick a framework, like Express, and try to understand some of its code. Ask specific questions about the things you don‚Äôt understand. I try to answer questions on the [jsComplete slack channel](https://slackin-bfcnswvsih.now.sh/) when I can.\n\nFinally, write a web application in Node without using any frameworks. Try to handle as many cases as you can, respond with an HTML file, parse query strings, accept form input, and create an endpoint that responds with JSON.\n\nAlso try writing a chat server, publishing an npm package, and contributing to an open-source Node-based project.\n\nGood luck! Thanks for reading.\n\nfont: https://medium.freecodecamp.org/before-you-bury-yourself-in-packages-learn-the-node-js-runtime-itself-f9031fbd8b69',
    author: 'Samer Buna',
    category: 'node',
    voteScore: 9,
    deleted: false,
    commentCount: 0,
  },
  'dc7b1e9e-d06d-43fd-8e04-c5cdce3c48a5': {
    id: 'dc7b1e9e-d06d-43fd-8e04-c5cdce3c48a5',
    timestamp: 1472871600000,
    title: 'Aphrodite vs.¬†JSS',
    summary:
      'First of all I am the author of JSS, so yes - I am biased, but I will try to stay as fair as possible, I promise.',
    body:
      'The reason I am writing this post is my feeling, that nobody knows the differences between those two deep down and this is understandable. My goal is not to show that JSS is better, this is up to you to decide. My goal is to show differences, to help you decide what is important to you.\n\n#### Different perspectives.\n\n> It‚Äôs inline styles, but they work!\n\nAphrodite tries to make inline styles work by generating CSS.\n\n> A lib for generating CSS from JavaScript.\n\nJSS tries to provide an api for generating CSS from JavaScript. The goal here is to achieve a predictable behavior and highest possible performance.\n\nDifferences in those perspectives are very well reflected in the corresponding API‚Äôs.\n\n#### Rendering model.\n\nBoth libraries compile JavaScript to CSS, which means, that at the end, both are generating a ‚Äústyle‚Äù tag with a CSS string inside. This is [fundamentally different to inline styles](https://medium.com/@oleg008/inline-styles-vs-css-f8c1c926bb63) known from React.\n\nHowever there is a big difference between JSS and Aphrodite‚Äôs implementation.\n\nAphrodite uses a single style node and writes **all** rules into it. The reason behind this is the [limitation of IE9](https://blogs.msdn.microsoft.com/ieinternals/2011/05/14/stylesheet-limits-in-internet-explorer/) and lower:\n\n> A sheet may contain up to 4095 rules  \n> A sheet may @import up to 31 sheets  \n> @import nesting supports up to 4 levels deep\n\nI would not recommend to use JSS to those who still support IE9. It is possible to fix this, I have a [plan](https://github.com/cssinjs/jss/issues/203) for an alternative batch-mode rendering backend, but I didn‚Äôt have time to actually implement it.\n\nI have several reasons for **not** switching JSS to Aphrodite‚Äôs rendering model by default:\n\n1.  Performance.¬†  \n    A [single write](https://github.com/cssinjs/jss/blob/master/src/backends/DomRenderer.js#L66) to style node is much faster than multiple writes during the application life cycle. Aphrodite tries to minimize amount of writes by accumulating rules and uses [asap](https://github.com/Khan/aphrodite/blob/master/src/inject.js#L130), but this brings even more issues I will talk about later.\n2.  Transparency  \n    Every sheet in JSS matches one style element. Which means that every component has it‚Äôs style tag in the head. This is easy to debug, you can always get a full picture of CSS generated by a certain component.\n\nAs a side note, current Aphrodite‚Äôs [rendering in older IE‚Äôs](https://github.com/Khan/aphrodite/blob/master/src/inject.js#L36) is sloppy, because it basically writes the CSS from entire application into style node on **every write**, which should make older IE‚Äôs slower, depending on how much CSS application has.\n\n#### JS API.\n\nAphrodite uses a pure functional style, which I like a lot. The price is though a number of limitations. For e.g. you can‚Äôt create multiple Aphrodite instances with different options. You can‚Äôt extend the library and it‚Äôs API is very limited.\n\nOne example is an extremely opinionated feature Aphrodite has from the beginning: every property value gets an ‚Äú!important‚Äù suffix. For e.g. button: {color: ‚Äòred‚Äô} renders to something like¬†.button\\_sdf24rs: {color: red¬†!important}. This was an attempt to fix isolation problems, however it doesn‚Äôt work for everybody well. Aphrodite‚Äôs solution to this is a separate ‚Äúno-important.js‚Äù entry point, which is not an appropriate way to introduce optional functionalities.\n\nAs JSS has been designed to be an abstraction over CSS, you should be able to do whatever you can do with lean JS to CSS. To achieve maximal customizability, JSS has a [plugins api](https://github.com/cssinjs/jss/blob/master/docs/plugins.md) which allows to modify the rules before they are rendered to the DOM. This also allows to keep JSS core small and fast. All opinionated functions like [vendor prefixing](https://github.com/cssinjs/jss-vendor-prefixer), [nesting](https://github.com/cssinjs/jss-nested), [default unit](https://github.com/cssinjs/jss-default-unit) and [many others](https://github.com/cssinjs?query=jss-) are implemented as plugins. This also allows us to create such experimental things like [automatic rules isolation](https://github.com/cssinjs/jss-isolate) and a better [JSON DSL Syntax](https://github.com/typical000/jss-expand) (check them out!).\n\n#### JSON DSL.\n\nAphrodite doesn‚Äôt support global CSS, selecting siblings or children, which is most of the time a **very good** thing!\n\nHowever sometimes you want to create a selector which targets a child node and this is **not bad** as long as you do not modify it‚Äôs inner styles. Modifying position and margins of child elements is something a parent definitely should be able to do. This can be done in JSS by using the [jss-nested](https://github.com/cssinjs/jss-nested) plugin.\n\n#### Theming.\n\nAphrodite has a css() function which allows to compose multiple rules during rendering. This is nice when it comes to theming, because it makes it easy to use a theme provided by the parent at any time. Also it renders **just** styles you really use in the current state of your component.\n\nTheming in JSS is available too, however it is less obvious how to do that and is currently not supported by the [react-jss](https://github.com/cssinjs/react-jss) package, which is an integration of jss into react.\n\nJSS wants to render the styles before a component renders it‚Äôs elements. It basically wants to know the core and theme styles upfront. This is not always convenient and is a topic of change for react-jss. JSS core itself however is ready. You can add rules to a sheet at any point of time, because it has¬†.addRule() and¬†.deleteRule() methods. Probably more effective way would be to call¬†.detach() before adding a lot of rules and then to¬†.attach() again. Because this way it will deploy them all to the DOM in one write.\n\n#### Unpredictable rendering.\n\nAphrodite renders rules to the DOM when they are used and this is cool. The downside is this: at the moment your DOM nodes are rendered‚Ää‚Äî‚ÄäCSS is probably not, because CSS is flushed to the DOM in the next tick, so the consequences are:\n\n1.  You need to use ‚ÄúsetTimeout‚Äù if you want to access calculated styles of the DOM nodes you just rendered.\n2.  It may result in double recalcs and repaints.\n\nJSS renders synchronously after you call the¬†.attach() method. It deploys CSS string to the style element and inserts the element into the document head. As long as the sheet is not attached, you can add/remove and modify rules without any DOM overhead. After that you can do all this as well, but changes are applied immediately to DOM CSSRule.\n\nfont: https://medium.com/@oleg008/aphrodite-vs-jss-a15761b91ee3',
    author: 'Oleg Isonen',
    category: 'css',
    voteScore: 180,
    deleted: false,
    commentCount: 0,
  },
  'aeb2d297-a45b-482b-83c3-236bb57d7542': {
    id: 'aeb2d297-a45b-482b-83c3-236bb57d7542',
    timestamp: 1515376800000,
    title: 'How to make your HTML responsive by adding a single line of¬†CSS',
    summary:
      'In this article I‚Äôll teach you how to use CSS Grid to create a super cool image grid which varies the amount of columns with the width of the screen.',
    body:
      'And the most beautiful part: **the responsiveness will be added with a single line of CSS.**\n\nThis means we don‚Äôt have to clutter up the HTML with ugly class names (i.e. `col-sm-4`, `col-md-8`) or create media queries for every single screen size.\n\n> I‚Äôve also created a free CSS Grid course. [Click here to get full access to¬†it.](https://scrimba.com/g/gR8PTE)\n\nAlternatively, check out [this article](https://medium.freecodecamp.org/heres-my-free-css-grid-course-merry-christmas-3826dd24f098), which explains what you‚Äôll learn throughout the course:\n\n[**Want to learn CSS Grid? Here‚Äôs my free full-length course. Merry Christmas!**  \n_13 interactive screencasts to take you from beginner to advanced._medium.freecodecamp.org](https://medium.freecodecamp.org/heres-my-free-css-grid-course-merry-christmas-3826dd24f098 "https://medium.freecodecamp.org/heres-my-free-css-grid-course-merry-christmas-3826dd24f098")[](https://medium.freecodecamp.org/heres-my-free-css-grid-course-merry-christmas-3826dd24f098)\n\nNow let‚Äôs jump into it!\n\n### The setup\n\nFor this article, we‚Äôll continue on with the grid we used in [my first CSS Grid article.](https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228) Then we‚Äôll add the images at the end of the article. Here‚Äôs how our initial grid looks:\n\n![](https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png)\n\nHere‚Äôs the HTML:\n```\n<div class="container">  \n  <div>1</div>  \n  <div>2</div>  \n  <div>3</div>  \n  <div>4</div>  \n  <div>5</div>  \n  <div>6</div>  \n</div>\n```\nAnd the CSS:\n```\n.container {  \n    display: grid;  \n    grid-template-columns: 100px 100px 100px;  \n    grid-template-rows: 50px 50px;  \n}\n```\n> Note: the example also has a little bit of basic styling, which I won‚Äôt go into here, as it‚Äôs got nothing to do with CSS Grid.\n\nIf this code confuses you, I‚Äôd recommend you to read my [Learn CSS Grid in 5 minutes](https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228) article, where I explain the basics of the layout module.\n\nLet‚Äôs start by making the columns responsive.\n\n### Basic responsiveness with the fraction¬†unit\n\nCSS Grid brings with it a whole new value called a fraction unit. The fraction unit is written like `fr`, and it allows you to split the container into as many fractions as you want.\n\nLet‚Äôs change each of the columns to be one fraction unit wide.\n```\n.container {  \n    display: grid;  \n    grid-template-columns: 1fr 1fr 1fr;  \n    grid-template-rows: 50px 50px;  \n}\n```\nWhat happens here is that the grid splits the entire width into three fractions and each of the columns take up one unit each. Here is the result:\n\n![](https://cdn-images-1.medium.com/max/1600/1*JgGPqT2AfFNDD8DhG2wPdQ.gif)\n\nIf we change the `grid-template-columns` value to`1fr 2fr 1fr`, the second column will now be twice as wide as the two other columns. The total width is now four fraction units, and the second one takes up two of them, while the others take up one each. Here‚Äôs how that looks:\n\n![](https://cdn-images-1.medium.com/max/1600/1*cpfokc1HBgCwOTNhRU9SHg.gif)\n\nIn other words, the fraction unit value makes it super easy for you to change the width of the columns.\n\n### Advanced responsiveness\n\nHowever, the example above doesn‚Äôt give us the responsiveness we want, as this grid will always be three columns wide. We want our grid to vary the amount of columns with the width of the container. To achieve that, you‚Äôll have to learn three new concepts.\n\n#### repeat()\n\nWe‚Äôll start with the `repeat()` function. This is a more powerful way of specifying your columns and rows. Let‚Äôs take our original grid and change it to using repeat():\n```\n.container {  \n    display: grid;  \n    grid-template-columns: repeat(3, 100px);  \n    grid-template-rows: repeat(2, 50px);  \n}\n```\nIn other words, `repeat(3, 100px)` is identical to `100px 100px 100px`. The first parameter specified how many columns or rows you want, and the second specifies their width, so this will just give us the exact same layout as we started out with:\n\n![](https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png)\n\n#### auto-fit\n\nThen there‚Äôs auto-fit. Let‚Äôs skip having a fixed amount of columns, and rather replace 3 with `auto-fit`.\n```\n.container {  \n    display: grid;  \n    grid-gap: 5px;  \n **grid-template-columns: repeat(auto-fit, 100px);**    grid-template-rows: repeat(2, 100px);  \n}\n```\nThis results in the following behaviour:\n\n\n![](https://cdn-images-1.medium.com/max/1600/1*vLZ9RD3dt0Q3hCieYfRuMg.gif)\n\nThe grid now varies the amount of columns with the width of the container.\n\n> It simply tries to fit as many 100px wide columns into the container as possible.\n\nHowever, if we hard code all columns to be exactly 100px, we‚Äôll never get the flexibility we want, as they‚Äôll rarely add up to the full width. As you can see on the gif above, the grid often leaves white space on the right hand side.\n\n#### minmax()\n\nThe final ingredient we need in order to fix this is called `minmax()`. We‚Äôll simply replace 100px with `minmax(100px, 1fr)`. Here‚Äôs the final CSS.\n```\n.container {  \n    display: grid;  \n    grid-gap: 5px;  \n **grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));**    grid-template-rows: repeat(2, 100px);  \n}\n```\n> Notice that all the responsiveness happens in a single line of¬†CSS.\n\nThis results in the following behavior:\n\n\n![](https://cdn-images-1.medium.com/max/1600/1*1FOrkyNbaabo3_LJxcdDbg.gif)\n\nAnd as you can see that works perfectly. The `minmax()` function defines a size range greater than or equal to **min** and less than or equal to max.\n\nSo the columns will now always be at least 100px. However if there are more available space, the grid will simply distribute this equally to each of the columns, as the columns turn into a fraction unit instead of 100 px.\n\n#### Adding the¬†images\n\nNow the final step is to add the images. This has nothing to do with CSS Grid, but let‚Äôs still look at the code.\n\nWe‚Äôll start off by adding an image tag inside of each of the grid items.\n```\n<div><img src="img/forest.jpg"/></div>\n```\nTo make the image fit into the item, we‚Äôll set the it to be as wide and tall as the item itself, and then use `object-fit: cover;`. This will make the image cover its entire container, and the browser will crop it if it‚Äôs needed.\n```\n.container > div > img {  \n    width: 100%;  \n    height: 100%;  \n    object-fit: cover;  \n}\n```\nWhich ends up like the following:\n\n![](https://cdn-images-1.medium.com/max/1600/1*jCNANupl0ECRzF6cOLuWNw.gif)\n\nAnd that‚Äôs it! You now know one of the most complex concepts in CSS Grid, so give yourself a pat on the back.\n\n#### Browser support\n\nBefore we end, I also need to mention browser support. At the time of writing this article, [77% of global website traffic supports CSS Grid](https://caniuse.com/#feat=css-grid), and it‚Äôs climbing.\n\nI believe 2018 will be the year of CSS Grid. It‚Äôll get its break-through, and will turn into a must-have skill for front-end developers. Much like what has happened with CSS Flexbox the last couple of years.\n\n> If you want to learn CSS Grid properly, simply [leave your email here](http://eepurl.com/c_R31n) and I‚Äôll give you early access to my free course when it‚Äôs¬†ready.\n\nAlternatively, check out the [preview of the course.](https://scrimba.com/p/pRB9Hw/c2gd3T2)\n\nfont: https://medium.freecodecamp.org/how-to-make-your-html-responsive-by-adding-a-single-line-of-css-2a62de81e431',
    author: 'Per Harald Borgen',
    category: 'css',
    voteScore: 34,
    deleted: false,
    commentCount: 0,
  },
  'd87bc1b5-530b-47ac-83be-dce9625a3cca': {
    id: 'd87bc1b5-530b-47ac-83be-dce9625a3cca',
    timestamp: 1482112800000,
    title: 'The 100% correct way to do CSS breakpoints',
    summary: '',
    body:
      '![](https://cdn-images-1.medium.com/max/2000/1*l9rwwtUMoiRJOb7uGEkhFg.jpeg)\n\nFor the next minute or so, I want you to forget about CSS. Forget about web development. Forget about digital user interfaces.\n\nAnd as you forget these things, I want you to allow your mind to wander. To wander back in time. Back to your youth. Back to your first day of school.\n\nIt was a simpler time, when all you had to worry about was drawing shapes and keeping your incontinence in check.\n\n![](https://cdn-images-1.medium.com/max/2000/1*XoDgRc5GXaxo7j47ClsIgw.png)\n\nTake a look at the dots above. Notice how some of them are clumped together, and some of them spread out? What I want you to do is break them up into five groups for me, however you see fit.\n\nGo ahead. After checking that no one is watching, draw a circle around each of the five groups with your child-like finger.\n\nYou probably came up with something like the below, right? (And whatever you do, don‚Äôt tell me you scrolled down without doing the exercise. I will face palm.)\n\n![](https://cdn-images-1.medium.com/max/2000/1*cZcTR2tVMzYg1U1h3cqdNg.png)\n\nSure, those two dots on the right could have gone either way. If you grouped them together it‚Äôs OK, I guess. They say there‚Äôs no wrong answer, but I‚Äôve never been wrong, so I‚Äôve never been on the receiving end of that particular platitude.\n\nBefore I go on, did you draw something like the below?\n\n![](https://cdn-images-1.medium.com/max/2000/1*RZryP0xAyOy1_WRpBdPIog.png)\n\nProbably not. Right?\n\nBut that‚Äôs basically what you‚Äôd be doing if you set your breakpoints at positions matching the exact width of popular devices (320px, 768px, 1024px).\n\n![](https://cdn-images-1.medium.com/max/2000/1*pwC0py16i-sQr1agaP26QQ.png)\n\nHave words of the below nature ever entered your ears or exited your mouth?\n\n> ‚ÄúIs the medium breakpoint _up to_ 768px, or including 768? I see‚Ä¶ and that‚Äôs iPad landscape, or is that ‚Äòlarge‚Äô? Oh, large is 768px _and up._ I see. And small is 320px? What is this range from 0 to 319px? A breakpoint _for¬†ants_?‚Äù\n\nI could proceed to show you the correct breakpoints and leave it at that. But I find it very curious that the above method (‚Äúsilly grouping‚Äù) is so widespread.\n\nWhy should that be?\n\nI think the answer to this problem, like so many problems, comes down to misaligned terminology. After all, _waterboarding at Guantanamo Bay_ sounds super rad if you don‚Äôt know what either of those things are. (Oh [I wish](https://www.reddit.com/r/Showerthoughts/comments/2ucx09/waterboarding_at_guantanamo_bay_sounds_super_rad/) that was my joke.)\n\nI think we mix up ‚Äúboundaries‚Äù and ‚Äúranges‚Äù in our discussions and implementations of breakpoints.\n\nTell me, if you do breakpoints in Sass, do you have a variable called `$large` that is, say, 768px?\n\nIs that the lower boundary of the range you refer to as large, or the upper boundary? If it‚Äôs the lower, then you must have no `$small` because that should be `0`, right?\n\nAnd if it‚Äôs the upper boundary then how would you define a breakpoint `$large-and-up`? That must be a media query with a `min-width` of `$medium`, right?\n\nAnd if you are referring to just a boundary when you say large, then we‚Äôre in for confusion later on because a media query is always a _range_.\n\nThis situation is a mess and we‚Äôre wasting time thinking about it. So I have three suggestions:\n\n1.  Get your break_points_ right\n2.  Name your _ranges_ sensibly\n3.  Be declarative\n\n### Tip #1: Get your breakpoints right\n\nSo what are the _right_ breakpoints?\n\nYour kindergarten self already drew the circles. I‚Äôll just turn them into rectangles for you.\n\n![](https://cdn-images-1.medium.com/max/2000/1*-ldpo5wcYVnuyRFbO24WPQ.png)\n\n600px, 900px, 1200px, and 1800px if you plan on giving the giant-monitor people something special. On a side note, if you‚Äôre ordering a giant monitor online, make sure you specify it‚Äôs for a computer. You don‚Äôt want to [get a giant lizard in the mail](http://metro.co.uk/2016/06/16/this-monster-lizard-at-the-door-is-absolutely-terrifying-5947737/).\n\nThose dots your channeled young self has been playing with actually represent the 14 most common screen sizes:\n\n![](https://cdn-images-1.medium.com/max/1600/1*199KbL2oM2P5d4pFMBXYxQ.png)\n\n[image credit](http://gs.statcounter.com/#desktop+mobile+tablet-resolution-ww-monthly-201608-201610-bar)\n\nSo we can make a pretty little picture that allows for the easy flow of words between the folks dressed up as business people, designers, developers, and testers.\n\n![](https://cdn-images-1.medium.com/max/2000/1*7YeOvzoYgUEDJdfQy2ERXg.png)\n\nI‚Äôm regretting my choice of orange and green, but I‚Äôm not redoing all of these pictures¬†now.\n\n### Tip #2: Name your ranges¬†sensibly\n\nSure, you could name your breakpoints [papa-bear and baby-bear](https://css-tricks.com/naming-media-queries/) if you like. But if I‚Äôm going to sit down with a designer and discuss how the site should look on different devices, I want it to be over as quickly as possible. If naming a size _portrait tablet_ facilitates that, then I‚Äôm sold. Heck, I‚Äôd even forgive you for calling it ‚ÄúiPad portrait.‚Äù\n\n‚ÄúBut the landscape is changing!‚Äù you may shout. ‚ÄúPhones are getting bigger, tablets are getting smaller!‚Äù\n\nBut your website‚Äôs CSS has a shelf life of about three years (unless it‚Äôs Gmail). The iPad has been with us for twice that time, and it has yet to be dethroned. And we know that Apple no longer makes new products, they just remove things from existing ones (buttons, holes, etc).\n\nSo 1024 x 768 is here to stay, folks. Let‚Äôs not bury our heads in the sand. (Fun fact: ostriches don‚Äôt live in cities because there is no sand, and thus nowhere to hide from predators.)\n\nConclusion: communication is important. Don‚Äôt purposefully detach yourself from helpful vocabulary.\n\n### Tip #3: Be declarative\n\nI know, I know, that word ‚Äúdeclarative‚Äù again. I‚Äôll put it another way: your CSS should define _what_ it wants to happen, not _how_ it should happen. The ‚Äúhow‚Äù belongs hidden away in some sort of mixin.\n\nAs discussed earlier, part of the confusion around breakpoints is that variables that define a _boundary_ of a range are used as the _name_ of the range. `$large: 600px` simply makes no sense if `large` is a range. It‚Äôs the same as saying `var coordinates = 4;`.\n\nSo we can hide those details inside a mixin rather than expose them to be used in the code. Or we can do one better and not use variables at all.\n\nAt first I did the below snippet as a simplified example. But really I think it covers all the bases. To see it in action, [check out this pen](http://codepen.io/davidgilbertson/pen/aBpJzO). I‚Äôm using Sass because I can‚Äôt imagine building a site without it. The logic applies to CSS or Less just the same.\n\n![](https://i.embed.ly/1/display/resize?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F4443482%3Fv%3D3%26s%3D400&key=4fce0568f2ce49e8b54624ef71a8a5bd&width=40)\n\nI might be biased, but that‚Äôs some nice declarative CSS.\n\nNote that I‚Äôm forcing the developer to specify the `-up` or `-only` suffix.\n\n> Ambiguity breeds confusion.\n\nAn obvious criticism might be that this doesn‚Äôt handle custom media queries. Well good news, everybody. If you want a custom media query, write a custom media query. (In practice, if I needed more complexity than the above I‚Äôd cut my losses and run into the loving embrace of [Susy](http://susydocs.oddbird.net/en/latest/toolkit/#breakpoint)‚Äôs toolkit.)\n\nAnother criticism might be that I‚Äôve got eight mixins here. Surely a single mixin would be the sane thing to do, then just pass in the required size, like so:\n\n![](https://i.embed.ly/1/display/resize?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F4443482%3Fv%3D3%26s%3D400&key=4fce0568f2ce49e8b54624ef71a8a5bd&width=40)\n\nSure, that works. But you won‚Äôt get compile-time errors if you pass in an unsupported name. And to pass in a sass variable means exposing 8 variables just to pass to a switch in a mixin.\n\nNot to mention the syntax `@include for-desktop-up {...}` is totes more pretty than `@include for-size(desktop-up) {...}`.\n\nA criticism of both these code snippets might be that I‚Äôm typing out 900px twice, and also 899px. Surely I should just use variables and subtract 1 when needed.\n\nIf you want to do that, go bananas, but there are two reasons I wouldn‚Äôt:\n\n1.  These are not things that change frequently. These are also not numbers that are used anywhere else in the code base. No problems are caused by the fact that they _aren‚Äôt_ variables‚Ää‚Äî‚Ääunless you want to expose your Sass breakpoints to a script that injects a JS object with those variables into your page.\n2.  The syntax is _nasty_ when you want to turn numbers into strings with Sass. Below is the price you pay for believing that repeating a number twice is the worst of all evils:\n\n<iframe src="https://gist.github.com/davidgilbertson/f40af111d843a1ccd8699ba3648f66d3.js"></iframe>\n\nDid the ease of comprehension just go up? Or down?\n\nOh and since I‚Äôve taken on a ranty tone over the last few paragraphs¬†‚Ä¶ I pity the fool who does something magical like store breakpoints in a Sass list and loop over them to output media queries, or something similarly ridiculous that future developers will struggle to decipher.\n\n> Complexity is where the bugs¬†hide.\n\nFinally, you may be thinking ‚Äúshouldn‚Äôt I be basing my breakpoints on content, not devices?‚Äù. Well I‚Äôm amazed you made it this far and the answer is yes¬†‚Ä¶ for sites with a single layout. Or if you have multiple layouts and are happy to have a different set of breakpoints for each layout. Oh and also if your site design doesn‚Äôt change often, or you‚Äôre happy to update your breakpoints when your designs update since you‚Äôll want to _keep_ them based on the content, right?\n\nFor complex sites, life is much easier if you pick a handful of breakpoints to use across the site.\n\nWe‚Äôre done! But this post has not been as furry as I would like, let me see if I can think of an excuse to include some‚Ä¶\n\nOh, I know!\n\n### Bonus tips for breakpoint development\n\n![](https://cdn-images-1.medium.com/max/2000/1*ClU6ZZNLtd0ux8nqRPfhng.png)\n\nYes, even flickr has breakpoints at 768 and¬†1400\n\n1.  If you need to experience CSS breakpoints for screen sizes bigger than the monitor you‚Äôre sitting at, use the ‚Äòresponsive‚Äô mode in Chrome DevTools and type in whatever giant size you like.\n2.  The blue bar shows ‚Äòmax-width‚Äô media queries, the orange bar is ‚Äòmin-width‚Äô media queries, and the green bar shows media queries with both a min and a max.\n3.  Clicking a media query sets the screen to that width. If you click on a green media query more than once, it toggles between the max and min widths.\n4.  Right click a media query in the media queries bar to go to the definition of that rule in the CSS.\n\nhttps://medium.freecodecamp.org/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862',
    author: 'David Gilbertson',
    category: 'css',
    voteScore: 305,
    deleted: false,
    commentCount: 0,
  },
  '1536fca6-46b2-4878-aee9-ba2bc1cd7afe': {
    id: '1536fca6-46b2-4878-aee9-ba2bc1cd7afe',
    timestamp: 1536014527943,
    title: 'Top JavaScript Libraries & Tech to Learn in¬†2018',
    summary: '',
    body:
      'Last year, I wrote an article rounding up the [top tech to learn in 2017](https://medium.com/javascript-scene/top-javascript-frameworks-topics-to-learn-in-2017-700a397b711). This year there are some surprises.\n\n> We set out to answer ‚Äúwhich learning topics will give you the highest chance of a return on the time you invest learning¬†them?‚Äù\n\n![](https://cdn-images-1.medium.com/max/1600/1*eLeegNau5KrKlpE0MDh61Q.png)\n\nJavaScript has the most packages, by a landslide.\n\nFirst, software ate the world, the web ate software, and JavaScript ate the web. In 2018, React is eating JavaScript.\n\n### 2018: The Year of¬†React\n\nReact won the popularity battle in 2017.\n\nThere are still lots of developers working on Angular code bases, which shows up in Google trends:\n\n![](https://cdn-images-1.medium.com/max/1600/1*Z5dxtF877QndConbs0Tglg.png)\n\nBut as React continues to win customer satisfaction surveys, React growth has left Angular (and everything else) in the dust.\n\n#### What About Vue.js? I Heard it‚Äôs¬†Hot\n\nEverybody loves paying lip service to alternatives like Vue.js. Here‚Äôs what I said about it last year:\n\n> [**Vue.js**](https://vuejs.org/) has a ton of GitHub stars and downloads. If things continue the way they are going, it will do very well in 2017, but I don‚Äôt think it will unseat either React or Angular (both of which are also growing fast) in the next year or so. Learn this **after** you have learned React or Angular.\n\nVue.js did do very well in 2017. It got a lot of headlines and a lot of people got interested. As I predicted, it **_did not come close_** to unseating React, and I‚Äôm confident to predict it won‚Äôt unseat React in 2018, either. That said, it could overtake Angular in 2018:\n\n![](https://cdn-images-1.medium.com/max/1600/1*IWIeZaJGBd82ZnIk4vYtnw.png)\n\nVue.js downloads/month\n\nAs you can see, Vue.js is gaining on Angular downloads:\n\n![](https://cdn-images-1.medium.com/max/1600/1*AOyTSi4Fs5uKNHZoyFcfHQ.png)\n\nangular/core downloads/month\n\nBut React has a strong lead and a strong growth rate to match:\n\n![](https://cdn-images-1.medium.com/max/1600/1*XKJokKyWBzwqNgG2Nzckiw.png)\n\nReact downloads/month\n\nVue.js is still growing faster than React. Why should it be any different than React vs Angular in 2017?\n\nAt the end of 2016, the JavaScript world was ready for a new framework. Angular users were very unsatisfied, React users were very satisfied, lots of people wanted to learn React, and very few wanted to learn Angular. At the end of 2017, Angular 2+ user satisfaction is still less than half, at 49%.\n\n**The story is very different for React vs Vue.js.** [React is beating Vue.js in user satisfaction](https://stateofjs.com/2017/front-end/results) (93% to 90%). The big incentive to switch from React in early 2017 was because of confusion over the React license. Facebook heard the users and switched the license.\n\nAt this stage, I simply don‚Äôt see compelling evidence that the market is motivated to switch from React to anything else. Vue.js is going to have a much harder time stealing users from React than they are having stealing users from jQuery and Angular.\n\nThere‚Äôs plenty of room for Vue.js to pick up a lot of Angular and jQuery users at a fast clip, but they will likely hit a brick wall when they have to start stealing users from React to continue the growth streak.\n\nI predict strong Vue.js growth for another year or two, followed by a much harder battle with React in the top spot and Vue.js relegated to second fiddle unless something big changes to upset the balance.\n\n### Jobs\n\n> jQuery has¬†fallen.\n\nIn the job listings, React completely took off and blew right past jQuery‚Ää‚Äî‚Ääthe **_first library to pass jQuery in job popularity in a decade_**.¬π What we‚Äôre witnessing here is the end of an era.\n\n\n![](https://cdn-images-1.medium.com/max/1600/1*Zsfr-vAuQXc95A7j1ebyEg.png)\n\nReact Rising‚Ää‚Äî‚Ääthe first library to unseat jQuery this decade (source: Indeed.com)\n\nCompare to last year‚Äôs chart:\n\n\n![](https://cdn-images-1.medium.com/max/1600/1*ZruXZe2HKfu2av8h4WBDfA.png)\n\njQuery is so¬†2016\n\nWhat‚Äôs really interesting in these charts is that other libraries grew a lot more than jQuery fell. The total open jobs mentioning a front-end framework are up by more than ~10k over last year.\n\nWith the job growth, we have also seen a boost in average salaries, too: [$110k](https://www.indeed.com/salaries/Javascript-Developer-Salaries) compared to $93k at the end of 2016. The inflation rate for the same period [stayed below 2%](https://data.bls.gov/timeseries/CUUR0000SA0L1E?output_view=pct_12mths), accounting for only a small percentage of the salary boost.\n\nClearly, it‚Äôs still a candidate‚Äôs market in 2018.\n\n> **1\\. Methodology:** Job searches were conducted on Indeed.com. To weed out false positives, I paired searches with the keyword ‚Äúsoftware‚Äù to strengthen the chance of relevance, and then multiplied by ~1.5 (roughly the difference between programming job listings that use the word ‚Äúsoftware‚Äù and those that don‚Äôt.) All SERPS were sorted by date and spot checked for relevance. The resulting figures aren‚Äôt 100% accurate, but they‚Äôre good enough for the relative approximations used in this article.\n\n### Framework Recommendations\n\nAfter looking at this year‚Äôs numbers, I‚Äôm prepared to strongly recommend React for most general app development use cases, including mobile apps (PWAs, React Native), web applications, most office productivity applications, and desktop media content production apps (see [Electron](https://electronjs.org/)).\n\nNotable category exceptions where something else may serve you better: Featherweight marketing landing pages (skip the framework entirely), 3D games, AR/VR. For 3D content, check out [Unity](https://unity3d.com/), [Unreal](https://www.unrealengine.com/en-US/what-is-unreal-engine-4), or [PlayCanvas](https://playcanvas.com/). That said, React is being used for 3D content UIs, too.\n\nI‚Äôm rating all other front-end frameworks strictly optional this year. This doesn‚Äôt mean they‚Äôre not cool, just not serious contenders to React in the job market. Remember, this list is about learning ROI, not which tech is the ‚Äúbest‚Äù.\n\n### Why so Much Interest in¬†React?\n\nBrowsing through the React job listings, I noticed an interesting trend‚Ää‚Äî‚Ääa lot of them were for things that we don‚Äôt think of as front-end web work:\n\n*   React Native (for perspective, there are more of these openings than the total number of Vue.js openings)\n*   React for IoT\n*   React for AR/VR (with Oculus Rift leading the hiring charge)\n*   React for obscure computing thing you‚Äôve never heard of\n\n> React has broken free of its web¬†roots.\n\nVersatility is one of the big selling points of React. Unlike many other frameworks, buying into React doesn‚Äôt entail buying into some baked in data model, or even the browser or DOM itself. In fact, I found quite a few React job listings that didn‚Äôt even mention JavaScript.\n\nReact also offers a rich, vibrant ecosystem piggybacking on React‚Äôs de-facto standards‚Ää‚Äî‚Ääsomething the JavaScript world hasn‚Äôt seen since jQuery plugins ruled the web.\n\n> The question is no longer ‚Äúwhich framework?‚Äù  \n> The question is ‚Äúwhich tech pairs best with¬†React?‚Äù\n\nNothing is going to unseat React in 2018 (maybe even 2019). You‚Äôre safe. JavaScript fatigue seems to be settling down. We have a great framework to build apps on now, and there‚Äôs a great ecosystem settling in around React.\n\n### Which Topics Should You¬†Study?\n\nLike last year, you can‚Äôt go wrong focusing on the essentials, but you should place more emphasis on functional programming for React apps.\n\nReact is great for two primary reasons:\n\n*   Deterministic view renders\n*   Abstracting the view layer away from direct DOM manipulation\n\nDeterminism is best served by building applications using pure functions, which is essentially the definition of functional programming.\n\nWith that in mind, here are some topics you should study:\n\n*   [**Basic ES6 syntax**](https://medium.com/javascript-scene/a-functional-programmers-introduction-to-javascript-composing-software-d670d14ede30)\n*   [**Class syntax and its many pitfalls**](https://medium.com/javascript-scene/why-composition-is-harder-with-classes-c3e627dcd0aa)‚Ää‚Äî‚ÄäIt‚Äôs OK to use `class` for React components, but avoid extending from your own classes, avoid `instanceof`, and avoid forcing users of your classes to use the `new` keyword.\n*   [**Functional programming & software composition**](https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea)\n*   [**Currying**](https://medium.com/javascript-scene/a-functional-programmers-introduction-to-javascript-composing-software-d670d14ede30#0355)\n*   [**Closures**](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36)\n*   [**Pure functions**](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976)\n*   [**Promises**](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261)\n*   [**Generators**](https://medium.com/javascript-scene/7-surprising-things-i-learned-writing-a-fibonacci-generator-4886a5c87710) **&** [**async functions**](https://medium.com/javascript-scene/the-hidden-power-of-es6-generators-observable-async-flow-control-cfa4c7f31435)\n*   [**TDD**](https://medium.com/javascript-scene/the-outrageous-cost-of-skipping-tdd-code-reviews-57887064c412)\n*   [**The RAIL performance model**](https://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/)\n*   **Progressive Web Applications (PWAs):** See [‚ÄúNative Apps are Doomed‚Äù](https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0) & [‚ÄúWhy Native Apps Really Are Doomed‚Äù](https://medium.com/javascript-scene/why-native-apps-really-are-doomed-native-apps-are-doomed-pt-2-e035b43170e9)\n*   **GraphQL** matured a lot in 2017, and is quickly taking over from REST APIs. Apollo is adding built-in offline first client cache architecture that will make Apollo+GraphQL a serious alternative (or complement) to Redux in 2018.\n\n### Libraries &¬†Tools\n\nThese are the libraries and tools I‚Äôm finding most useful:\n\n*   [**React**](https://reactjs.org/)\n*   [**Redux**](https://redux.js.org/)\n*   [**Redux-Saga**](https://github.com/redux-saga/redux-saga) to manage async I/O and isolate side-effects\n*   [**Next.js**](https://github.com/zeit/next.js/)‚Ää‚Äî‚ÄäSSR with Node & Express, automatic bundle splitting, styled-jsx\n*   [**Material UI**](http://www.material-ui.com/)\n*   [**Storybook**](https://github.com/storybooks/storybook)\n*   [**Cheerio**](https://github.com/cheeriojs/cheerio) for unit testing React components (I prefer this over Enzyme)\n*   [**Lodash**](https://lodash.com/) (I prefer utilities from `lodash/fp`). Import just the utilities you need to avoid blowing up your bundle size.\n*   [**Babel**](https://babeljs.io/)**:** Used to compile ES6 to work on older browsers.\n*   [**Webpack**](https://webpack.github.io/)**:** The most popular bundler for standard JavaScript look for simple starter kit/boilerplate config examples to get things running fast)\n*   [**ESLint:**](http://eslint.org/) Catch syntax errors and style issues early. After code review and TDD, the third best thing you can do to reduce bugs in your code.\n*   [**Ramda**](http://ramdajs.com/)‚Äî‚Äämostly for lenses and transducers.\n*   [**Node & Express**](https://medium.com/javascript-scene/introduction-to-node-express-90c431f9e6fd#.gl2r6gcnn)\n*   [**RxJS**](http://reactivex.io/rxjs/)**:** Observables for JavaScript. I‚Äôve been using transducers more, lately. Remember to [use pipeable operators](https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md) to avoid blowing up your bundle size.\n\n**TypeScript** did well in 2017, but I‚Äôve seen it get in the way and complicate apps more than it helped. It‚Äôs primary shortcomings are over reliance on annotations as opposed to inference, and an inability to properly type higher-order functions without indescribable contortions. I gave it a full-time daily trial for a while, but these still apply: [‚ÄúThe Shocking Secret About Static Types‚Äù](https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3) &[‚ÄúYou Might Not Need TypeScript‚Äù](https://medium.com/javascript-scene/you-might-not-need-typescript-or-static-types-aa7cb670a77b). Flow shares the same problems and the developer tools are not as good as TypeScript‚Äôs.\n\n### Tech to Watch in¬†2018\n\nAll of these areas of R&D are creating real jobs in 2018:\n\n*   Progressive Web Apps (PWAs)\n*   Blockchain & fintech\n*   Medical technology\n*   AR/VR‚Ää‚Äî‚ÄäHololens, Meta, and ODG are shipping today. ODG R-9 was scheduled to ship in 2017 but will likely ship in 2018 instead. MagicLeap has promised to ship in 2018. AR will transform the human experience more than the cell phone did.\n*   3D printing\n*   AI\n*   Drones\n\nQuantum computing is also poised to transform the world, but it may be 2019 or later before the disruption really starts. There are working quantum computers online, but they can‚Äôt do much yet. It‚Äôs still too early for most developers to even begin to experiment productively. Microsoft recently announced its [Q# programming language](https://arstechnica.com/gadgets/2017/12/microsofts-q-quantum-programming-language-out-now-in-preview/) for quantum computing. Meanwhile, [IBM](https://www.forbes.com/sites/alexkonrad/2017/12/14/why-companies-like-jpmorgan-chase-and-samsung-are-partnering-with-ibm-in-quantum-computing/#123ce0592c4d) and [Google](https://www.inverse.com/article/38917-google-quantum-simulator-creates-a-butterfly) also continue to invest heavily to own the embryonic cloud quantum computing market.\n\nIf you want to be prepared to learn quantum computing, you‚Äôll want to study up on [linear algebra](https://mitpress.mit.edu/books/quantum-algorithms-linear-algebra). There are also functional explorations of quantum computing based on [lambda calculus](https://plato.stanford.edu/entries/lambda-calculus/).\n\nIt‚Äôs likely that, as we‚Äôve seen with AI, cloud APIs will be developed that will let people with less math background take advantage of some of the capabilities of quantum computing.\n\n### Need React Training for Your¬†Team?\n\nDevAnywhere offers live remote training plus 1:1 mentorship to teach the functional programming and software composition principles critical to getting the most from React.\n\n*   Live lessons\n*   Flexible hours\n*   1:1 mentorship\n*   Build real production apps\n\nfont: https://medium.com/javascript-scene/top-javascript-libraries-tech-to-learn-in-2018-c38028e028e6',
    author: 'Eric Elliott',
    category: 'javascript',
    voteScore: 66,
    deleted: false,
    commentCount: 0,
  },
  'c53eb3ed-5320-4770-90da-dd727a429874': {
    id: 'c53eb3ed-5320-4770-90da-dd727a429874',
    timestamp: 1536014784696,
    title: 'Clean code javascript',
    summary: '',
    body:
      "## Table of Contents\n  1. [Introduction](#introduction)\n  2. [Variables](#variables)\n  3. [Functions](#functions)\n  4. [Objects and Data Structures](#objects-and-data-structures)\n  5. [Classes](#classes)\n  6. [SOLID](#solid)\n  7. [Testing](#testing)\n  8. [Concurrency](#concurrency)\n  9. [Error Handling](#error-handling)\n  10. [Formatting](#formatting)\n  11. [Comments](#comments)\n  12. [Translation](#translation)\n\n<h2 id=\"introduction\">Introduction</h2>\n\n![Humorous image of software quality estimation as a count of how many expletives\nyou shout when reading code](http://www.osnews.com/images/comics/wtfm.jpg)\n\nSoftware engineering principles, from Robert C. Martin's book\n[*Clean Code*](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882),\nadapted for JavaScript. This is not a style guide. It's a guide to producing\n[readable, reusable, and refactorable](https://github.com/ryanmcdermott/3rs-of-software-architecture) software in JavaScript.\n\nNot every principle herein has to be strictly followed, and even fewer will be\nuniversally agreed upon. These are guidelines and nothing more, but they are\nones codified over many years of collective experience by the authors of\n*Clean Code*.\n\nOur craft of software engineering is just a bit over 50 years old, and we are\nstill learning a lot. When software architecture is as old as architecture\nitself, maybe then we will have harder rules to follow. For now, let these\nguidelines serve as a touchstone by which to assess the quality of the\nJavaScript code that you and your team produce.\n\nOne more thing: knowing these won't immediately make you a better software\ndeveloper, and working with them for many years doesn't mean you won't make\nmistakes. Every piece of code starts as a first draft, like wet clay getting\nshaped into its final form. Finally, we chisel away the imperfections when\nwe review it with our peers. Don't beat yourself up for first drafts that need\nimprovement. Beat up the code instead!\n\n<h2 id=\"variables\">Variables</h2>\n\n### Use meaningful and pronounceable variable names\n\n**Bad:**\n```javascript\nconst yyyymmdstr = moment().format('YYYY/MM/DD');\n```\n\n**Good:**\n```javascript\nconst currentDate = moment().format('YYYY/MM/DD');\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Use the same vocabulary for the same type of variable\n\n**Bad:**\n```javascript\ngetUserInfo();\ngetClientData();\ngetCustomerRecord();\n```\n\n**Good:**\n```javascript\ngetUser();\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Use searchable names\nWe will read more code than we will ever write. It's important that the code we\ndo write is readable and searchable. By *not* naming variables that end up\nbeing meaningful for understanding our program, we hurt our readers.\nMake your names searchable. Tools like\n[buddy.js](https://github.com/danielstjules/buddy.js) and\n[ESLint](https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md)\ncan help identify unnamed constants.\n\n**Bad:**\n```javascript\n// What the heck is 86400000 for?\nsetTimeout(blastOff, 86400000);\n\n```\n\n**Good:**\n```javascript\n// Declare them as capitalized named constants.\nconst MILLISECONDS_IN_A_DAY = 86400000;\n\nsetTimeout(blastOff, MILLISECONDS_IN_A_DAY);\n\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Use explanatory variables\n**Bad:**\n```javascript\nconst address = 'One Infinite Loop, Cupertino 95014';\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityZipCode(address.match(cityZipCodeRegex)[1], address.match(cityZipCodeRegex)[2]);\n```\n\n**Good:**\n```javascript\nconst address = 'One Infinite Loop, Cupertino 95014';\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nconst [, city, zipCode] = address.match(cityZipCodeRegex) || [];\nsaveCityZipCode(city, zipCode);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid Mental Mapping\nExplicit is better than implicit.\n\n**Bad:**\n```javascript\nconst locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((l) => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  // Wait, what is `l` for again?\n  dispatch(l);\n});\n```\n\n**Good:**\n```javascript\nconst locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((location) => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  dispatch(location);\n});\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Don't add unneeded context\nIf your class/object name tells you something, don't repeat that in your\nvariable name.\n\n**Bad:**\n```javascript\nconst Car = {\n  carMake: 'Honda',\n  carModel: 'Accord',\n  carColor: 'Blue'\n};\n\nfunction paintCar(car) {\n  car.carColor = 'Red';\n}\n```\n\n**Good:**\n```javascript\nconst Car = {\n  make: 'Honda',\n  model: 'Accord',\n  color: 'Blue'\n};\n\nfunction paintCar(car) {\n  car.color = 'Red';\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Use default arguments instead of short circuiting or conditionals\nDefault arguments are often cleaner than short circuiting. Be aware that if you\nuse them, your function will only provide default values for `undefined`\narguments. Other \"falsy\" values such as `''`, `\"\"`, `false`, `null`, `0`, and\n`NaN`, will not be replaced by a default value.\n\n**Bad:**\n```javascript\nfunction createMicrobrewery(name) {\n  const breweryName = name || 'Hipster Brew Co.';\n  // ...\n}\n\n```\n\n**Good:**\n```javascript\nfunction createMicrobrewery(name = 'Hipster Brew Co.') {\n  // ...\n}\n\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"functions\">Functions</h2>\n\n### Function arguments (2 or fewer ideally)\nLimiting the amount of function parameters is incredibly important because it\nmakes testing your function easier. Having more than three leads to a\ncombinatorial explosion where you have to test tons of different cases with\neach separate argument.\n\nOne or two arguments is the ideal case, and three should be avoided if possible.\nAnything more than that should be consolidated. Usually, if you have\nmore than two arguments then your function is trying to do too much. In cases\nwhere it's not, most of the time a higher-level object will suffice as an\nargument.\n\nSince JavaScript allows you to make objects on the fly, without a lot of class\nboilerplate, you can use an object if you are finding yourself needing a\nlot of arguments.\n\nTo make it obvious what properties the function expects, you can use the ES2015/ES6\ndestructuring syntax. This has a few advantages:\n\n1. When someone looks at the function signature, it's immediately clear what\nproperties are being used.\n2. Destructuring also clones the specified primitive values of the argument\nobject passed into the function. This can help prevent side effects. Note:\nobjects and arrays that are destructured from the argument object are NOT\ncloned.\n3. Linters can warn you about unused properties, which would be impossible\nwithout destructuring.\n\n**Bad:**\n```javascript\nfunction createMenu(title, body, buttonText, cancellable) {\n  // ...\n}\n```\n\n**Good:**\n```javascript\nfunction createMenu({ title, body, buttonText, cancellable }) {\n  // ...\n}\n\ncreateMenu({\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n});\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n### Functions should do one thing\nThis is by far the most important rule in software engineering. When functions\ndo more than one thing, they are harder to compose, test, and reason about.\nWhen you can isolate a function to just one action, they can be refactored\neasily and your code will read much cleaner. If you take nothing else away from\nthis guide other than this, you'll be ahead of many developers.\n\n**Bad:**\n```javascript\nfunction emailClients(clients) {\n  clients.forEach((client) => {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n\n**Good:**\n```javascript\nfunction emailActiveClients(clients) {\n  clients\n    .filter(isActiveClient)\n    .forEach(email);\n}\n\nfunction isActiveClient(client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Function names should say what they do\n\n**Bad:**\n```javascript\nfunction addToDate(date, month) {\n  // ...\n}\n\nconst date = new Date();\n\n// It's hard to tell from the function name what is added\naddToDate(date, 1);\n```\n\n**Good:**\n```javascript\nfunction addMonthToDate(month, date) {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(1, date);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Functions should only be one level of abstraction\nWhen you have more than one level of abstraction your function is usually\ndoing too much. Splitting up functions leads to reusability and easier\ntesting.\n\n**Bad:**\n```javascript\nfunction parseBetterJSAlternative(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(' ');\n  const tokens = [];\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  ast.forEach((node) => {\n    // parse...\n  });\n}\n```\n\n**Good:**\n```javascript\nfunction parseBetterJSAlternative(code) {\n  const tokens = tokenize(code);\n  const ast = lexer(tokens);\n  ast.forEach((node) => {\n    // parse...\n  });\n}\n\nfunction tokenize(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(' ');\n  const tokens = [];\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      tokens.push( /* ... */ );\n    });\n  });\n\n  return tokens;\n}\n\nfunction lexer(tokens) {\n  const ast = [];\n  tokens.forEach((token) => {\n    ast.push( /* ... */ );\n  });\n\n  return ast;\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Remove duplicate code\nDo your absolute best to avoid duplicate code. Duplicate code is bad because it\nmeans that there's more than one place to alter something if you need to change\nsome logic.\n\nImagine if you run a restaurant and you keep track of your inventory: all your\ntomatoes, onions, garlic, spices, etc. If you have multiple lists that\nyou keep this on, then all have to be updated when you serve a dish with\ntomatoes in them. If you only have one list, there's only one place to update!\n\nOftentimes you have duplicate code because you have two or more slightly\ndifferent things, that share a lot in common, but their differences force you\nto have two or more separate functions that do much of the same things. Removing\nduplicate code means creating an abstraction that can handle this set of\ndifferent things with just one function/module/class.\n\nGetting the abstraction right is critical, that's why you should follow the\nSOLID principles laid out in the *Classes* section. Bad abstractions can be\nworse than duplicate code, so be careful! Having said this, if you can make\na good abstraction, do it! Don't repeat yourself, otherwise you'll find yourself\nupdating multiple places anytime you want to change one thing.\n\n**Bad:**\n```javascript\nfunction showDeveloperList(developers) {\n  developers.forEach((developer) => {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach((manager) => {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n**Good:**\n```javascript\nfunction showEmployeeList(employees) {\n  employees.forEach((employee) => {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n\n    const data = {\n      expectedSalary,\n      experience\n    };\n\n    switch (employee.type) {\n      case 'manager':\n        data.portfolio = employee.getMBAProjects();\n        break;\n      case 'developer':\n        data.githubLink = employee.getGithubLink();\n        break;\n    }\n\n    render(data);\n  });\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Set default objects with Object.assign\n\n**Bad:**\n```javascript\nconst menuConfig = {\n  title: null,\n  body: 'Bar',\n  buttonText: null,\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  config.title = config.title || 'Foo';\n  config.body = config.body || 'Bar';\n  config.buttonText = config.buttonText || 'Baz';\n  config.cancellable = config.cancellable !== undefined ? config.cancellable : true;\n}\n\ncreateMenu(menuConfig);\n```\n\n**Good:**\n```javascript\nconst menuConfig = {\n  title: 'Order',\n  // User did not include 'body' key\n  buttonText: 'Send',\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  config = Object.assign({\n    title: 'Foo',\n    body: 'Bar',\n    buttonText: 'Baz',\n    cancellable: true\n  }, config);\n\n  // config now equals: {title: \"Order\", body: \"Bar\", buttonText: \"Send\", cancellable: true}\n  // ...\n}\n\ncreateMenu(menuConfig);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n### Don't use flags as function parameters\nFlags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.\n\n**Bad:**\n```javascript\nfunction createFile(name, temp) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n```\n\n**Good:**\n```javascript\nfunction createFile(name) {\n  fs.create(name);\n}\n\nfunction createTempFile(name) {\n  createFile(`./temp/${name}`);\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid Side Effects (part 1)\nA function produces a side effect if it does anything other than take a value in\nand return another value or values. A side effect could be writing to a file,\nmodifying some global variable, or accidentally wiring all your money to a\nstranger.\n\nNow, you do need to have side effects in a program on occasion. Like the previous\nexample, you might need to write to a file. What you want to do is to\ncentralize where you are doing this. Don't have several functions and classes\nthat write to a particular file. Have one service that does it. One and only one.\n\nThe main point is to avoid common pitfalls like sharing state between objects\nwithout any structure, using mutable data types that can be written to by anything,\nand not centralizing where your side effects occur. If you can do this, you will\nbe happier than the vast majority of other programmers.\n\n**Bad:**\n```javascript\n// Global variable referenced by following function.\n// If we had another function that used this name, now it'd be an array and it could break it.\nlet name = 'Ryan McDermott';\n\nfunction splitIntoFirstAndLastName() {\n  name = name.split(' ');\n}\n\nsplitIntoFirstAndLastName();\n\nconsole.log(name); // ['Ryan', 'McDermott'];\n```\n\n**Good:**\n```javascript\nfunction splitIntoFirstAndLastName(name) {\n  return name.split(' ');\n}\n\nconst name = 'Ryan McDermott';\nconst newName = splitIntoFirstAndLastName(name);\n\nconsole.log(name); // 'Ryan McDermott';\nconsole.log(newName); // ['Ryan', 'McDermott'];\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid Side Effects (part 2)\nIn JavaScript, primitives are passed by value and objects/arrays are passed by\nreference. In the case of objects and arrays, if your function makes a change\nin a shopping cart array, for example, by adding an item to purchase,\nthen any other function that uses that `cart` array will be affected by this\naddition. That may be great, however it can be bad too. Let's imagine a bad\nsituation:\n\nThe user clicks the \"Purchase\", button which calls a `purchase` function that\nspawns a network request and sends the `cart` array to the server. Because\nof a bad network connection, the `purchase` function has to keep retrying the\nrequest. Now, what if in the meantime the user accidentally clicks \"Add to Cart\"\nbutton on an item they don't actually want before the network request begins?\nIf that happens and the network request begins, then that purchase function\nwill send the accidentally added item because it has a reference to a shopping\ncart array that the `addItemToCart` function modified by adding an unwanted\nitem.\n\nA great solution would be for the `addItemToCart` to always clone the `cart`,\nedit it, and return the clone. This ensures that no other functions that are\nholding onto a reference of the shopping cart will be affected by any changes.\n\nTwo caveats to mention to this approach:\n  1. There might be cases where you actually want to modify the input object,\nbut when you adopt this programming practice you will find that those cases\nare pretty rare. Most things can be refactored to have no side effects!\n\n  2. Cloning big objects can be very expensive in terms of performance. Luckily,\nthis isn't a big issue in practice because there are\n[great libraries](https://facebook.github.io/immutable-js/) that allow\nthis kind of programming approach to be fast and not as memory intensive as\nit would be for you to manually clone objects and arrays.\n\n**Bad:**\n```javascript\nconst addItemToCart = (cart, item) => {\n  cart.push({ item, date: Date.now() });\n};\n```\n\n**Good:**\n```javascript\nconst addItemToCart = (cart, item) => {\n  return [...cart, { item, date: Date.now() }];\n};\n```\n\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Don't write to global functions\nPolluting globals is a bad practice in JavaScript because you could clash with another\nlibrary and the user of your API would be none-the-wiser until they get an\nexception in production. Let's think about an example: what if you wanted to\nextend JavaScript's native Array method to have a `diff` method that could\nshow the difference between two arrays? You could write your new function\nto the `Array.prototype`, but it could clash with another library that tried\nto do the same thing. What if that other library was just using `diff` to find\nthe difference between the first and last elements of an array? This is why it\nwould be much better to just use ES2015/ES6 classes and simply extend the `Array` global.\n\n**Bad:**\n```javascript\nArray.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem => !hash.has(elem));\n};\n```\n\n**Good:**\n```javascript\nclass SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem => !hash.has(elem));\n  }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Favor functional programming over imperative programming\nJavaScript isn't a functional language in the way that Haskell is, but it has\na functional flavor to it. Functional languages can be cleaner and easier to test.\nFavor this style of programming when you can.\n\n**Bad:**\n```javascript\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n```\n\n**Good:**\n```javascript\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = programmerOutput\n  .map(output => output.linesOfCode)\n  .reduce((totalLines, lines) => totalLines + lines);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Encapsulate conditionals\n\n**Bad:**\n```javascript\nif (fsm.state === 'fetching' && isEmpty(listNode)) {\n  // ...\n}\n```\n\n**Good:**\n```javascript\nfunction shouldShowSpinner(fsm, listNode) {\n  return fsm.state === 'fetching' && isEmpty(listNode);\n}\n\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid negative conditionals\n\n**Bad:**\n```javascript\nfunction isDOMNodeNotPresent(node) {\n  // ...\n}\n\nif (!isDOMNodeNotPresent(node)) {\n  // ...\n}\n```\n\n**Good:**\n```javascript\nfunction isDOMNodePresent(node) {\n  // ...\n}\n\nif (isDOMNodePresent(node)) {\n  // ...\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid conditionals\nThis seems like an impossible task. Upon first hearing this, most people say,\n\"how am I supposed to do anything without an `if` statement?\" The answer is that\nyou can use polymorphism to achieve the same task in many cases. The second\nquestion is usually, \"well that's great but why would I want to do that?\" The\nanswer is a previous clean code concept we learned: a function should only do\none thing. When you have classes and functions that have `if` statements, you\nare telling your user that your function does more than one thing. Remember,\njust do one thing.\n\n**Bad:**\n```javascript\nclass Airplane {\n  // ...\n  getCruisingAltitude() {\n    switch (this.type) {\n      case '777':\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case 'Air Force One':\n        return this.getMaxAltitude();\n      case 'Cessna':\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n    }\n  }\n}\n```\n\n**Good:**\n```javascript\nclass Airplane {\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid type-checking (part 1)\nJavaScript is untyped, which means your functions can take any type of argument.\nSometimes you are bitten by this freedom and it becomes tempting to do\ntype-checking in your functions. There are many ways to avoid having to do this.\nThe first thing to consider is consistent APIs.\n\n**Bad:**\n```javascript\nfunction travelToTexas(vehicle) {\n  if (vehicle instanceof Bicycle) {\n    vehicle.pedal(this.currentLocation, new Location('texas'));\n  } else if (vehicle instanceof Car) {\n    vehicle.drive(this.currentLocation, new Location('texas'));\n  }\n}\n```\n\n**Good:**\n```javascript\nfunction travelToTexas(vehicle) {\n  vehicle.move(this.currentLocation, new Location('texas'));\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid type-checking (part 2)\nIf you are working with basic primitive values like strings and integers,\nand you can't use polymorphism but you still feel the need to type-check,\nyou should consider using TypeScript. It is an excellent alternative to normal\nJavaScript, as it provides you with static typing on top of standard JavaScript\nsyntax. The problem with manually type-checking normal JavaScript is that\ndoing it well requires so much extra verbiage that the faux \"type-safety\" you get\ndoesn't make up for the lost readability. Keep your JavaScript clean, write\ngood tests, and have good code reviews. Otherwise, do all of that but with\nTypeScript (which, like I said, is a great alternative!).\n\n**Bad:**\n```javascript\nfunction combine(val1, val2) {\n  if (typeof val1 === 'number' && typeof val2 === 'number' ||\n      typeof val1 === 'string' && typeof val2 === 'string') {\n    return val1 + val2;\n  }\n\n  throw new Error('Must be of type String or Number');\n}\n```\n\n**Good:**\n```javascript\nfunction combine(val1, val2) {\n  return val1 + val2;\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Don't over-optimize\nModern browsers do a lot of optimization under-the-hood at runtime. A lot of\ntimes, if you are optimizing then you are just wasting your time. [There are good\nresources](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers)\nfor seeing where optimization is lacking. Target those in the meantime, until\nthey are fixed if they can be.\n\n**Bad:**\n```javascript\n\n// On old browsers, each iteration with uncached `list.length` would be costly\n// because of `list.length` recomputation. In modern browsers, this is optimized.\nfor (let i = 0, len = list.length; i < len; i++) {\n  // ...\n}\n```\n\n**Good:**\n```javascript\nfor (let i = 0; i < list.length; i++) {\n  // ...\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Remove dead code\nDead code is just as bad as duplicate code. There's no reason to keep it in\nyour codebase. If it's not being called, get rid of it! It will still be safe\nin your version history if you still need it.\n\n**Bad:**\n```javascript\nfunction oldRequestModule(url) {\n  // ...\n}\n\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n\n```\n\n**Good:**\n```javascript\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"objects-and-data-structures\">Objects and Data Structures</h2>\n\n### Use getters and setters\nUsing getters and setters to access data on objects could be better than simply\nlooking for a property on an object. \"Why?\" you might ask. Well, here's an\nunorganized list of reasons why:\n\n* When you want to do more beyond getting an object property, you don't have\nto look up and change every accessor in your codebase.\n* Makes adding validation simple when doing a `set`.\n* Encapsulates the internal representation.\n* Easy to add logging and error handling when getting and setting.\n* You can lazy load your object's properties, let's say getting it from a\nserver.\n\n\n**Bad:**\n```javascript\nfunction makeBankAccount() {\n  // ...\n\n  return {\n    balance: 0,\n    // ...\n  };\n}\n\nconst account = makeBankAccount();\naccount.balance = 100;\n```\n\n**Good:**\n```javascript\nfunction makeBankAccount() {\n  // this one is private\n  let balance = 0;\n\n  // a \"getter\", made public via the returned object below\n  function getBalance() {\n    return balance;\n  }\n\n  // a \"setter\", made public via the returned object below\n  function setBalance(amount) {\n    // ... validate before updating the balance\n    balance = amount;\n  }\n\n  return {\n    // ...\n    getBalance,\n    setBalance,\n  };\n}\n\nconst account = makeBankAccount();\naccount.setBalance(100);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n### Make objects have private members\nThis can be accomplished through closures (for ES5 and below).\n\n**Bad:**\n```javascript\n\nconst Employee = function(name) {\n  this.name = name;\n};\n\nEmployee.prototype.getName = function getName() {\n  return this.name;\n};\n\nconst employee = new Employee('John Doe');\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: undefined\n```\n\n**Good:**\n```javascript\nfunction makeEmployee(name) {\n  return {\n    getName() {\n      return name;\n    },\n  };\n}\n\nconst employee = makeEmployee('John Doe');\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n<h2 id=\"classes\">Classes</h2>\n\n### Prefer ES2015/ES6 classes over ES5 plain functions\nIt's very difficult to get readable class inheritance, construction, and method\ndefinitions for classical ES5 classes. If you need inheritance (and be aware\nthat you might not), then prefer ES2015/ES6 classes. However, prefer small functions over\nclasses until you find yourself needing larger and more complex objects.\n\n**Bad:**\n```javascript\nconst Animal = function(age) {\n  if (!(this instanceof Animal)) {\n    throw new Error('Instantiate Animal with `new`');\n  }\n\n  this.age = age;\n};\n\nAnimal.prototype.move = function move() {};\n\nconst Mammal = function(age, furColor) {\n  if (!(this instanceof Mammal)) {\n    throw new Error('Instantiate Mammal with `new`');\n  }\n\n  Animal.call(this, age);\n  this.furColor = furColor;\n};\n\nMammal.prototype = Object.create(Animal.prototype);\nMammal.prototype.constructor = Mammal;\nMammal.prototype.liveBirth = function liveBirth() {};\n\nconst Human = function(age, furColor, languageSpoken) {\n  if (!(this instanceof Human)) {\n    throw new Error('Instantiate Human with `new`');\n  }\n\n  Mammal.call(this, age, furColor);\n  this.languageSpoken = languageSpoken;\n};\n\nHuman.prototype = Object.create(Mammal.prototype);\nHuman.prototype.constructor = Human;\nHuman.prototype.speak = function speak() {};\n```\n\n**Good:**\n```javascript\nclass Animal {\n  constructor(age) {\n    this.age = age;\n  }\n\n  move() { /* ... */ }\n}\n\nclass Mammal extends Animal {\n  constructor(age, furColor) {\n    super(age);\n    this.furColor = furColor;\n  }\n\n  liveBirth() { /* ... */ }\n}\n\nclass Human extends Mammal {\n  constructor(age, furColor, languageSpoken) {\n    super(age, furColor);\n    this.languageSpoken = languageSpoken;\n  }\n\n  speak() { /* ... */ }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n### Use method chaining\nThis pattern is very useful in JavaScript and you see it in many libraries such\nas jQuery and Lodash. It allows your code to be expressive, and less verbose.\nFor that reason, I say, use method chaining and take a look at how clean your code\nwill be. In your class functions, simply return `this` at the end of every function,\nand you can chain further class methods onto it.\n\n**Bad:**\n```javascript\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n  }\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n  }\n}\n\nconst car = new Car('Ford','F-150','red');\ncar.setColor('pink');\ncar.save();\n```\n\n**Good:**\n```javascript\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setModel(model) {\n    this.model = model;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setColor(color) {\n    this.color = color;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n    // NOTE: Returning this for chaining\n    return this;\n  }\n}\n\nconst car = new Car('Ford','F-150','red')\n  .setColor('pink')\n  .save();\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Prefer composition over inheritance\nAs stated famously in [*Design Patterns*](https://en.wikipedia.org/wiki/Design_Patterns) by the Gang of Four,\nyou should prefer composition over inheritance where you can. There are lots of\ngood reasons to use inheritance and lots of good reasons to use composition.\nThe main point for this maxim is that if your mind instinctively goes for\ninheritance, try to think if composition could model your problem better. In some\ncases it can.\n\nYou might be wondering then, \"when should I use inheritance?\" It\ndepends on your problem at hand, but this is a decent list of when inheritance\nmakes more sense than composition:\n\n1. Your inheritance represents an \"is-a\" relationship and not a \"has-a\"\nrelationship (Human->Animal vs. User->UserDetails).\n2. You can reuse code from the base classes (Humans can move like all animals).\n3. You want to make global changes to derived classes by changing a base class.\n(Change the caloric expenditure of all animals when they move).\n\n**Bad:**\n```javascript\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  // ...\n}\n\n// Bad because Employees \"have\" tax data. EmployeeTaxData is not a type of Employee\nclass EmployeeTaxData extends Employee {\n  constructor(ssn, salary) {\n    super();\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n```\n\n**Good:**\n```javascript\nclass EmployeeTaxData {\n  constructor(ssn, salary) {\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  setTaxData(ssn, salary) {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n  }\n  // ...\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"solid\">SOLID</h2>\n\n### Single Responsibility Principle (SRP)\nAs stated in Clean Code, \"There should never be more than one reason for a class\nto change\". It's tempting to jam-pack a class with a lot of functionality, like\nwhen you can only take one suitcase on your flight. The issue with this is\nthat your class won't be conceptually cohesive and it will give it many reasons\nto change. Minimizing the amount of times you need to change a class is important.\nIt's important because if too much functionality is in one class and you modify\na piece of it, it can be difficult to understand how that will affect other\ndependent modules in your codebase.\n\n**Bad:**\n```javascript\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n  }\n\n  changeSettings(settings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n```\n\n**Good:**\n```javascript\nclass UserAuth {\n  constructor(user) {\n    this.user = user;\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\n\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Open/Closed Principle (OCP)\nAs stated by Bertrand Meyer, \"software entities (classes, modules, functions,\netc.) should be open for extension, but closed for modification.\" What does that\nmean though? This principle basically states that you should allow users to\nadd new functionalities without changing existing code.\n\n**Bad:**\n```javascript\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = 'ajaxAdapter';\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = 'nodeAdapter';\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    if (this.adapter.name === 'ajaxAdapter') {\n      return makeAjaxCall(url).then((response) => {\n        // transform response and return\n      });\n    } else if (this.adapter.name === 'httpNodeAdapter') {\n      return makeHttpCall(url).then((response) => {\n        // transform response and return\n      });\n    }\n  }\n}\n\nfunction makeAjaxCall(url) {\n  // request and return promise\n}\n\nfunction makeHttpCall(url) {\n  // request and return promise\n}\n```\n\n**Good:**\n```javascript\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = 'ajaxAdapter';\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = 'nodeAdapter';\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    return this.adapter.request(url).then((response) => {\n      // transform response and return\n    });\n  }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Liskov Substitution Principle (LSP)\nThis is a scary term for a very simple concept. It's formally defined as \"If S\nis a subtype of T, then objects of type T may be replaced with objects of type S\n(i.e., objects of type S may substitute objects of type T) without altering any\nof the desirable properties of that program (correctness, task performed,\netc.).\" That's an even scarier definition.\n\nThe best explanation for this is if you have a parent class and a child class,\nthen the base class and child class can be used interchangeably without getting\nincorrect results. This might still be confusing, so let's take a look at the\nclassic Square-Rectangle example. Mathematically, a square is a rectangle, but\nif you model it using the \"is-a\" relationship via inheritance, you quickly\nget into trouble.\n\n**Bad:**\n```javascript\nclass Rectangle {\n  constructor() {\n    this.width = 0;\n    this.height = 0;\n  }\n\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width) {\n    this.width = width;\n    this.height = width;\n  }\n\n  setHeight(height) {\n    this.width = height;\n    this.height = height;\n  }\n}\n\nfunction renderLargeRectangles(rectangles) {\n  rectangles.forEach((rectangle) => {\n    rectangle.setWidth(4);\n    rectangle.setHeight(5);\n    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n**Good:**\n```javascript\nclass Shape {\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(width, height) {\n    super();\n    this.width = width;\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(length) {\n    super();\n    this.length = length;\n  }\n\n  getArea() {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes) {\n  shapes.forEach((shape) => {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Interface Segregation Principle (ISP)\nJavaScript doesn't have interfaces so this principle doesn't apply as strictly\nas others. However, it's important and relevant even with JavaScript's lack of\ntype system.\n\nISP states that \"Clients should not be forced to depend upon interfaces that\nthey do not use.\" Interfaces are implicit contracts in JavaScript because of\nduck typing.\n\nA good example to look at that demonstrates this principle in JavaScript is for\nclasses that require large settings objects. Not requiring clients to setup\nhuge amounts of options is beneficial, because most of the time they won't need\nall of the settings. Making them optional helps prevent having a\n\"fat interface\".\n\n**Bad:**\n```javascript\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.animationModule.setup();\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName('body'),\n  animationModule() {} // Most of the time, we won't need to animate when traversing.\n  // ...\n});\n\n```\n\n**Good:**\n```javascript\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.options = settings.options;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.setupOptions();\n  }\n\n  setupOptions() {\n    if (this.options.animationModule) {\n      // ...\n    }\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName('body'),\n  options: {\n    animationModule() {}\n  }\n});\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Dependency Inversion Principle (DIP)\nThis principle states two essential things:\n1. High-level modules should not depend on low-level modules. Both should\ndepend on abstractions.\n2. Abstractions should not depend upon details. Details should depend on\nabstractions.\n\nThis can be hard to understand at first, but if you've worked with AngularJS,\nyou've seen an implementation of this principle in the form of Dependency\nInjection (DI). While they are not identical concepts, DIP keeps high-level\nmodules from knowing the details of its low-level modules and setting them up.\nIt can accomplish this through DI. A huge benefit of this is that it reduces\nthe coupling between modules. Coupling is a very bad development pattern because\nit makes your code hard to refactor.\n\nAs stated previously, JavaScript doesn't have interfaces so the abstractions\nthat are depended upon are implicit contracts. That is to say, the methods\nand properties that an object/class exposes to another object/class. In the\nexample below, the implicit contract is that any Request module for an\n`InventoryTracker` will have a `requestItems` method.\n\n**Bad:**\n```javascript\nclass InventoryRequester {\n  constructor() {\n    this.REQ_METHODS = ['HTTP'];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryTracker {\n  constructor(items) {\n    this.items = items;\n\n    // BAD: We have created a dependency on a specific request implementation.\n    // We should just have requestItems depend on a request method: `request`\n    this.requester = new InventoryRequester();\n  }\n\n  requestItems() {\n    this.items.forEach((item) => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nconst inventoryTracker = new InventoryTracker(['apples', 'bananas']);\ninventoryTracker.requestItems();\n```\n\n**Good:**\n```javascript\nclass InventoryTracker {\n  constructor(items, requester) {\n    this.items = items;\n    this.requester = requester;\n  }\n\n  requestItems() {\n    this.items.forEach((item) => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nclass InventoryRequesterV1 {\n  constructor() {\n    this.REQ_METHODS = ['HTTP'];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryRequesterV2 {\n  constructor() {\n    this.REQ_METHODS = ['WS'];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\n// By constructing our dependencies externally and injecting them, we can easily\n// substitute our request module for a fancy new one that uses WebSockets.\nconst inventoryTracker = new InventoryTracker(['apples', 'bananas'], new InventoryRequesterV2());\ninventoryTracker.requestItems();\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"testing\">Testing</h2>\n\nTesting is more important than shipping. If you have no tests or an\ninadequate amount, then every time you ship code you won't be sure that you\ndidn't break anything. Deciding on what constitutes an adequate amount is up\nto your team, but having 100% coverage (all statements and branches) is how\nyou achieve very high confidence and developer peace of mind. This means that\nin addition to having a great testing framework, you also need to use a\n[good coverage tool](http://gotwarlost.github.io/istanbul/).\n\nThere's no excuse to not write tests. There are [plenty of good JS test frameworks](http://jstherightway.org/#testing-tools), so find one that your team prefers.\nWhen you find one that works for your team, then aim to always write tests\nfor every new feature/module you introduce. If your preferred method is\nTest Driven Development (TDD), that is great, but the main point is to just\nmake sure you are reaching your coverage goals before launching any feature,\nor refactoring an existing one.\n\n### Single concept per test\n\n**Bad:**\n```javascript\nimport assert from 'assert';\n\ndescribe('MakeMomentJSGreatAgain', () => {\n  it('handles date boundaries', () => {\n    let date;\n\n    date = new MakeMomentJSGreatAgain('1/1/2015');\n    date.addDays(30);\n    assert.equal('1/31/2015', date);\n\n    date = new MakeMomentJSGreatAgain('2/1/2016');\n    date.addDays(28);\n    assert.equal('02/29/2016', date);\n\n    date = new MakeMomentJSGreatAgain('2/1/2015');\n    date.addDays(28);\n    assert.equal('03/01/2015', date);\n  });\n});\n```\n\n**Good:**\n```javascript\nimport assert from 'assert';\n\ndescribe('MakeMomentJSGreatAgain', () => {\n  it('handles 30-day months', () => {\n    const date = new MakeMomentJSGreatAgain('1/1/2015');\n    date.addDays(30);\n    assert.equal('1/31/2015', date);\n  });\n\n  it('handles leap year', () => {\n    const date = new MakeMomentJSGreatAgain('2/1/2016');\n    date.addDays(28);\n    assert.equal('02/29/2016', date);\n  });\n\n  it('handles non-leap year', () => {\n    const date = new MakeMomentJSGreatAgain('2/1/2015');\n    date.addDays(28);\n    assert.equal('03/01/2015', date);\n  });\n});\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"concurrency\">Concurrency</h2>\n\n### Use Promises, not callbacks\nCallbacks aren't clean, and they cause excessive amounts of nesting. With ES2015/ES6,\nPromises are a built-in global type. Use them!\n\n**Bad:**\n```javascript\nimport { get } from 'request';\nimport { writeFile } from 'fs';\n\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', (requestErr, response) => {\n  if (requestErr) {\n    console.error(requestErr);\n  } else {\n    writeFile('article.html', response.body, (writeErr) => {\n      if (writeErr) {\n        console.error(writeErr);\n      } else {\n        console.log('File written');\n      }\n    });\n  }\n});\n\n```\n\n**Good:**\n```javascript\nimport { get } from 'request';\nimport { writeFile } from 'fs';\n\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin')\n  .then((response) => {\n    return writeFile('article.html', response);\n  })\n  .then(() => {\n    console.log('File written');\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Async/Await are even cleaner than Promises\nPromises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await\nwhich offer an even cleaner solution. All you need is a function that is prefixed\nin an `async` keyword, and then you can write your logic imperatively without\na `then` chain of functions. Use this if you can take advantage of ES2017/ES8 features\ntoday!\n\n**Bad:**\n```javascript\nimport { get } from 'request-promise';\nimport { writeFile } from 'fs-promise';\n\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin')\n  .then((response) => {\n    return writeFile('article.html', response);\n  })\n  .then(() => {\n    console.log('File written');\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n\n```\n\n**Good:**\n```javascript\nimport { get } from 'request-promise';\nimport { writeFile } from 'fs-promise';\n\nasync function getCleanCodeArticle() {\n  try {\n    const response = await get('https://en.wikipedia.org/wiki/Robert_Cecil_Martin');\n    await writeFile('article.html', response);\n    console.log('File written');\n  } catch(err) {\n    console.error(err);\n  }\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n<h2 id=\"error-handling\">Error Handling</h2>\n\nThrown errors are a good thing! They mean the runtime has successfully\nidentified when something in your program has gone wrong and it's letting\nyou know by stopping function execution on the current stack, killing the\nprocess (in Node), and notifying you in the console with a stack trace.\n\n### Don't ignore caught errors\nDoing nothing with a caught error doesn't give you the ability to ever fix\nor react to said error. Logging the error to the console (`console.log`)\nisn't much better as often times it can get lost in a sea of things printed\nto the console. If you wrap any bit of code in a `try/catch` it means you\nthink an error may occur there and therefore you should have a plan,\nor create a code path, for when it occurs.\n\n**Bad:**\n```javascript\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  console.log(error);\n}\n```\n\n**Good:**\n```javascript\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  // One option (more noisy than console.log):\n  console.error(error);\n  // Another option:\n  notifyUserOfError(error);\n  // Another option:\n  reportErrorToService(error);\n  // OR do all three!\n}\n```\n\n### Don't ignore rejected promises\nFor the same reason you shouldn't ignore caught errors\nfrom `try/catch`.\n\n**Bad:**\n```javascript\ngetdata()\n  .then((data) => {\n    functionThatMightThrow(data);\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n```\n\n**Good:**\n```javascript\ngetdata()\n  .then((data) => {\n    functionThatMightThrow(data);\n  })\n  .catch((error) => {\n    // One option (more noisy than console.log):\n    console.error(error);\n    // Another option:\n    notifyUserOfError(error);\n    // Another option:\n    reportErrorToService(error);\n    // OR do all three!\n  });\n```\n\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n<h2 id=\"formatting\">Formatting<h2>\n\nFormatting is subjective. Like many rules herein, there is no hard and fast\nrule that you must follow. The main point is DO NOT ARGUE over formatting.\nThere are [tons of tools](http://standardjs.com/rules.html) to automate this.\nUse one! It's a waste of time and money for engineers to argue over formatting.\n\nFor things that don't fall under the purview of automatic formatting\n(indentation, tabs vs. spaces, double vs. single quotes, etc.) look here\nfor some guidance.\n\n### Use consistent capitalization\nJavaScript is untyped, so capitalization tells you a lot about your variables,\nfunctions, etc. These rules are subjective, so your team can choose whatever\nthey want. The point is, no matter what you all choose, just be consistent.\n\n**Bad:**\n```javascript\nconst DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\nclass animal {}\nclass Alpaca {}\n```\n\n**Good:**\n```javascript\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\nclass Animal {}\nclass Alpaca {}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n\n### Function callers and callees should be close\nIf a function calls another, keep those functions vertically close in the source\nfile. Ideally, keep the caller right above the callee. We tend to read code from\ntop-to-bottom, like a newspaper. Because of this, make your code read that way.\n\n**Bad:**\n```javascript\nclass PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, 'peers');\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n```\n\n**Good:**\n```javascript\nclass PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, 'peers');\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n```\n\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"comments\">Comments</h2>\n\n### Only comment things that have business logic complexity.\nComments are an apology, not a requirement. Good code *mostly* documents itself.\n\n**Bad:**\n```javascript\nfunction hashIt(data) {\n  // The hash\n  let hash = 0;\n\n  // Length of string\n  const length = data.length;\n\n  // Loop through every character in data\n  for (let i = 0; i < length; i++) {\n    // Get character code.\n    const char = data.charCodeAt(i);\n    // Make the hash\n    hash = ((hash << 5) - hash) + char;\n    // Convert to 32-bit integer\n    hash &= hash;\n  }\n}\n```\n\n**Good:**\n```javascript\n\nfunction hashIt(data) {\n  let hash = 0;\n  const length = data.length;\n\n  for (let i = 0; i < length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n\n    // Convert to 32-bit integer\n    hash &= hash;\n  }\n}\n\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Don't leave commented out code in your codebase\nVersion control exists for a reason. Leave old code in your history.\n\n**Bad:**\n```javascript\ndoStuff();\n// doOtherStuff();\n// doSomeMoreStuff();\n// doSoMuchStuff();\n```\n\n**Good:**\n```javascript\ndoStuff();\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Don't have journal comments\nRemember, use version control! There's no need for dead code, commented code,\nand especially journal comments. Use `git log` to get history!\n\n**Bad:**\n```javascript\n/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Removed type-checking (LI)\n * 2015-03-14: Added combine with type-checking (JR)\n */\nfunction combine(a, b) {\n  return a + b;\n}\n```\n\n**Good:**\n```javascript\nfunction combine(a, b) {\n  return a + b;\n}\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n### Avoid positional markers\nThey usually just add noise. Let the functions and variable names along with the\nproper indentation and formatting give the visual structure to your code.\n\n**Bad:**\n```javascript\n////////////////////////////////////////////////////////////////////////////////\n// Scope Model Instantiation\n////////////////////////////////////////////////////////////////////////////////\n$scope.model = {\n  menu: 'foo',\n  nav: 'bar'\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Action setup\n////////////////////////////////////////////////////////////////////////////////\nconst actions = function() {\n  // ...\n};\n```\n\n**Good:**\n```javascript\n$scope.model = {\n  menu: 'foo',\n  nav: 'bar'\n};\n\nconst actions = function() {\n  // ...\n};\n```\n**[‚¨Ü back to top](#table-of-contents)**\n\n<h2 id=\"translation\">Translation</h2>\n\nThis is also available in other languages:\n\n  - ![br](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png) **Brazilian Portuguese**: [fesnt/clean-code-javascript](https://github.com/fesnt/clean-code-javascript)\n  - ![es](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png) **Spanish**: [andersontr15/clean-code-javascript](https://github.com/andersontr15/clean-code-javascript-es)\n  - ![cn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png) **Chinese**:\n    - [alivebao/clean-code-js](https://github.com/alivebao/clean-code-js)\n    - [beginor/clean-code-javascript](https://github.com/beginor/clean-code-javascript)\n  - ![de](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png) **German**: [marcbruederlin/clean-code-javascript](https://github.com/marcbruederlin/clean-code-javascript)\n  - ![kr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png) **Korean**: [qkraudghgh/clean-code-javascript-ko](https://github.com/qkraudghgh/clean-code-javascript-ko)\n  - ![pl](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png) **Polish**: [greg-dev/clean-code-javascript-pl](https://github.com/greg-dev/clean-code-javascript-pl)\n  - ![ru](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png) **Russian**:\n    - [BoryaMogila/clean-code-javascript-ru/](https://github.com/BoryaMogila/clean-code-javascript-ru/)\n    - [maksugr/clean-code-javascript](https://github.com/maksugr/clean-code-javascript)\n  - ![vi](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png) **Vietnamese**: [hienvd/clean-code-javascript/](https://github.com/hienvd/clean-code-javascript/)\n  - ![ja](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png) **Japanese**: [mitsuruog/clean-code-javascript/](https://github.com/mitsuruog/clean-code-javascript/)\n  - ![id](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png) **Indonesia**:\n  [andirkh/clean-code-javascript/](https://github.com/andirkh/clean-code-javascript/)\n\n**[‚¨Ü back to top](#table-of-contents)**\n\nfont: https://github.com/ryanmcdermott/clean-code-javascript/blob/master/README.md",
    author: 'Ryan McDermott',
    category: 'javascript',
    voteScore: 783,
    deleted: false,
    commentCount: 0,
  },
  '8775ab05-1ccf-47a1-bc1f-99861e9debef': {
    id: '8775ab05-1ccf-47a1-bc1f-99861e9debef',
    timestamp: 1536015814582,
    title:
      'Yes, React is taking over front-end development. The question is¬†why.',
    summary:
      'The focus of this article is about React‚Äôs popularity and not how it compares to other frameworks or libraries',
    body:
      'Here are a few reasons why React has become so popular so quickly:\n\n*   Working with the DOM API is hard. React basically gives developers the ability to work with a virtual browser that is more friendly than the real browser. React‚Äôs virtual browser acts like an agent between the developer and the real browser.\n*   React enables developers to declaratively describe their User Interfaces and model the state of those interfaces. This means instead of coming up with steps to describe transactions on interfaces, developers just describe the interfaces in terms of a final state (like a function). When transactions happen to that state, React takes care of updating the User Interfaces based on that.\n*   React is just JavaScript, there is a very small API to learn, just a few functions and how to use them. After that, your JavaScript skills are what make you a better React developer. There are no barriers to entry. A JavaScript developer can become a productive React developer in a few hours.\n\nBut there‚Äôs a lot more to it than just that. Let‚Äôs attempt to cover all the reasons behind React‚Äôs rising popularity. One reason is its Virtual DOM (React‚Äôs reconciliation algorithm). We‚Äôll work through an example to show the actual practical value of having such an algorithm at your command.\n\nReact‚Äôs official definition states that it‚Äôs a _JavaScript library for building User Interfaces_. It‚Äôs important to understand the two different parts of this definition:\n\n1.  React is a _JavaScript library_. It‚Äôs not a framework. It‚Äôs not a complete solution and we‚Äôll often need to use more libraries with React to form any solution. React does not assume anything about the other parts in any full solution. It focuses on just one thing, and on doing that thing very well.\n2.  The thing that React does really well is the second part of the definition: _building User Interfaces_. A User Interface is anything we put in front of users to have them interact with a machine. User Interfaces are everywhere, from the simple buttons on a microwave to the dashboard of a space shuttle. If the device we‚Äôre trying to interface can understand JavaScript, we can use React to describe a User Interface for it.\n\nSince Web browsers understand JavaScript, we can use React to describe Web User Interfaces. I like to use the word _describe_ here because that‚Äôs what _we_ basically do with React, we just tell it what we want and React will build the actual User Interfaces, on our behalf, in the Web browser. Without React or similar libraries, we would need to manually build User Interfaces with native Web APIs and JavaScript.\n\nWhen you hear the statement that ‚ÄúReact is declarative,‚Äù this is exactly what it means, we describe User Interfaces with React and tell it what we want (not how to do it). React will take care of the ‚Äúhow‚Äù and translate our declarative descriptions (which we write in the React language) to actual User Interfaces in the browser. React shares this simple declarative power with HTML itself, but with React, we get to be declarative for HTML interfaces that represent dynamic data, not just static data.\n\nReact has three main design concepts that drive its popularity:\n\n#### 1‚Ää‚Äî‚ÄäThe use of reusable, composable, and stateful components\n\nIn React, we describe User Interfaces using components. You can think of components as simple functions (in any programming language). We call functions with some input and they give us some output. We can reuse functions as needed and compose bigger functions from smaller ones.\n\nComponents are exactly the same; we call their input ‚Äúproperties‚Äù and ‚Äústate‚Äù, and a component output is a description of a User Interface (which is similar to HTML for browsers). We can reuse a single component in multiple User Interfaces, and components can contain other components.\n\nUnlike pure functions however, a full React component can have a private state to hold data that may change over time.\n\n#### 2‚Ää‚Äî‚ÄäThe nature of reactive¬†updates\n\nReact‚Äôs name is the simple explanation for this concept. When the state of a component (the input) changes, the User Interface it represents (the output) changes as well. This change in the description of the User Interface has to be reflected in the device we‚Äôre working with.\n\nIn a browser, we need to regenerate the HTML views in the Document Object Model (DOM). With React, we do not need to worry about _how_ to reflect these changes, or even manage _when_ to take changes to the browser; React will simply _react_ to the state changes and automatically update the DOM when needed.\n\n#### 3‚Ää‚Äî‚ÄäThe virtual representation of views in¬†memory\n\nWith React, we write HTML using JavaScript. We rely on the power of JavaScript to generate HTML that depends on some data, rather than enhancing HTML to make it work with that data. Enhancing HTML is what other JavaScript frameworks usually do. For example, Angular extends HTML with features like loops, conditionals, and others.\n\nWhen we receive just the data from the server (in the background, with AJAX), we need something more than HTML to work with that data. It‚Äôs either using an enhanced HTML, or using the power of JavaScript itself to generate the HTML. Both approaches have advantages and disadvantages. React embraces the latter one, with the argument that the advantages are stronger than the disadvantages.\n\nIn fact, there is one major advantage that can make the case for this approach by itself; using JavaScript to render HTML makes it easy for React to keep a virtual representation of HTML in memory (which is commonly known as _The Virtual DOM_). React uses the Virtual DOM to render an HTML tree virtually first, and then, every time a state changes and we get a new HTML tree that needs to be taken to the browser‚Äôs DOM, instead of writing the whole new tree React will only write the difference between the new tree and the previous tree (since React has both trees in memory). This process is known as _Tree Reconciliation_, and I think, it is the best thing that has happened in Web Development since AJAX!\n\nIn the following example, we‚Äôll focus on this last concept and see a simple practical example of the tree reconciliation process and the big difference it makes. We‚Äôll write the same HTML example twice, first using native Web APIs and vanilla JavaScript, and then we‚Äôll see how to describe the same HTML tree with React.\n\nTo purely focus on this last concept, we will not be using components, and we will mock a state change operation using a JavaScript timer. We are also not going to use JSX, although using JSX will make for a much simpler code. I use JSX all the time when I write React, but working with React API directly in this example will hopefully make you understand this concept much better.\n\n#### React‚Äôs reconciliation algorithm example\n\nTo follow along with this example, you need a browser and a code editor. You can actually use an online coding playground, but I‚Äôll use local files and test them directly in a browser (we don‚Äôt need a web server):\n\nWe‚Äôll start this example from scratch. Create a new directory, and launch your favorite editor there:\n\n    mkdir react-democd react-demoatom .\n\nCreate an `index.html` file in that directory, and put a standard HTML template in there. Include in that template a `script.js` file and put a `console.log` statement in that script to test that the include works:\n```\n<!DOCTYPE html>  \n<html>  \n  <head>  \n    <meta charset="utf-8">  \n    <title>React Demo</title>  \n  </head>  \n  <body>  \n    `<script src="script.js"></script>  \n`  </body>  \n</html>\n```\nOpen the `index.html` file in your browser and make sure you can see the empty template without problems, and that you can see in the Console dev-tools tab the `console.log` test message that you put in `script.js`:\n\n    open index.html # On Macexplorer index.html # On Windows\n\nNow, let‚Äôs bring in the React library itself, which we can include from the [Reactjs website](https://facebook.github.io/react/docs/installation.html). Copy both the `react` and `react-dom` scripts, and include them in `index.html`:\n\n<script src="https://unpkg.com/react@15/dist/react.js"></script> <script src="https://unpkg.com/react-dom@15/dist/react-dom.js"></script>\n\nWe‚Äôre including two different scripts here for an important reason: The `React` library itself can be used without a browser. To use React with a browser, we need the `ReactDOM` library.\n\nWhen we refresh the browser now, we should see both `React` and `ReactDOM` available on the global scope:\n\n\n![](https://cdn-images-1.medium.com/max/1600/1*g5-fvPYO0bTelGckK9RWzA.png)\n\nImage captured in¬†Chrome\n\nWith this simple setup, we can now access both `React` and `ReactDOM` APIs, and of course, we also have access to the native Web APIs and JavaScript which we are going to use first.\n\nTo insert HTML dynamically in the browser we can simply use pure JavaScript and the DOM Web API itself. Let‚Äôs create a `div` element to host our JavaScript HTML content and give it the id `"js"`. In the body element of `index.html`, right before the `script` tag, add:\n```\n<div id="js"></div>\n```\nNow in `script.js`, let\'s grab this new `div` element by its id and put it in a constant. Let\'s name this constant `jsContainer`. We can use `document.getElementById` to grab the `div` from HTML:\n```\nconst jsContainer = document.getElementById("js");\n```\nTo control the content of this `div`, we can use the `innerHTML` setter call on the `div` element directly. We can use this call to supply any HTML template that we want inserted in the DOM. Let\'s insert a `div` element with a class of "demo" and the string "Hello JS" as its content:\n```\njsContainer.innerHTML = \\`  \n  <div class="demo">  \n    Hello JS  \n  </div>  \n\\`;\n```\nMake sure this works in the browser. You should see the ‚ÄúHello JS‚Äù line on the screen now.\n\nThis demo div is our User Interface so far. It‚Äôs a very simple one. We just output a text for the user to see.\n\nBoth `document.getElementById` and `element.innerHTML` are actually part of the native DOM Web API. We are communicating with the browser directly here using the supported APIs of the Web platform. When we write React code, however, we use the React API instead, and we let React communicate with the browser using the DOM Web API.\n\nReact acts like our _agent_ for the browser, and we _mostly_ need to communicate with just React, our agent, and not the browser itself. I say mostly because there are cases where we still need to communicate with the browser, but those are rare.\n\nTo create the exact same User Interface that we have so far but with React API this time, let‚Äôs create another `div` element and give it an id of `"react"`. In `index.html`, right under the `div#js` element, add:\n```\n<div id="react"></div>\n```\nNow, in `script.js`, create a new container constant for the new `div`:\n\nconst reactContainer = document.getElementById("react");\n\nThis container will be the only call we make to the native web API. ReactDOM needs this container to know where to host our application in the DOM.\n\nWith the react container identified, we can now use the ReactDOM library to `render` React\'s version of the HTML template to this container:\n```\nReactDOM.render(  \n  /\\* TODO: React\'s version of the HTML template \\*/,  \n  reactContainer  \n)\n```\nWhat we‚Äôre going to do next is your first milestone in truly understanding the React library. Remember when I told you that with React we write HTML using JavaScript? This is exactly what we are going to do next.\n\nTo write our simple HTML User Interface, we are going to use JavaScript calls to React API, and by the end of the example you‚Äôll have a better picture about the reason for doing so.\n\nInstead of working with strings (as we did in the native JavaScript example above), in React, we work with _objects_. Any HTML string will be represented as an object using a `React.createElement` call (which is the core function in the React API).\n\nHere‚Äôs the equivalent HTML User Interface we have so far with React:\n```\nReactDOM.render(  \n    React.createElement(  \n      "div",  \n      { className: "demo" },  \n      "Hello React"  \n    ),  \n    reactContainer  \n  );\n\n`React.createElement` has many arguments:\n```\n*   The first argument is the HTML tag, which is `div` in our example.\n*   The second argument is an object that represents any attributes we want this tag to have. To match the native JS example we used `{ className: "demo" }` which translates to `class="demo"`. Note how we used `className` instead of `class` in the attributes because with React it\'s all JavaScript that matches the Web API, not HTML itself.\n*   The third argument is the content of the element. We‚Äôve put a ‚ÄúHello React‚Äù string in there.\n\nWe can test this now. The browser should render both ‚ÄúHello JS‚Äù and ‚ÄúHello React‚Äù. Let‚Äôs style the demo divs as a box, using this CSS, just so that we can visually split the screen. In `index.html`:\n```\n<style media="screen">  \n  .demo {  \n    border: 1px solid #ccc;  \n    margin: 1em;  \n    padding: 1em;  \n  }  \n</style>\n```\n![](https://cdn-images-1.medium.com/max/1600/1*TwcqWtECXp6OA0mowRcvEA.png)\n\nImage captured in¬†Chrome\n\nWe now have two nodes, one being controlled with the DOM Web API directly, and another being controlled with the React API (which in turn uses the DOM Web API). The only major difference between the ways we are building these two nodes in the browser is that in the JS version we used a string to represent the content, while in the React version we used pure JavaScript calls and represented the content with an object instead of a string.\n\nNo matter how complicated the HTML User Interface is going to get, when using React, every HTML element will be represented with a JavaScript object using a `React.createElement` call.\n\nLet‚Äôs now add some more features to our simple User Interface. Let‚Äôs add a text box to read input from the user.\n\nTo nest elements in our HTML template, it‚Äôs straight forward in the JS version because it‚Äôs just HTML. For example, to make the demo `div` render an `<input />` element, we simply add it to the content:\n```\njsContainer.innerHTML = \\`  \n  <div class="demo">  \n    Hello JS  \n    <input />  \n  </div>  \n\\`;\n```\nWe can do the same with React by adding more arguments after the 3rd argument for `React.createElement`. To match what we did in the native JS example, we can add a 4th argument that is another `React.createElement` call that renders an `input` element (remember, every HTML element is an object):\n```\n    ReactDOM.render(  React.createElement(    "div",    { className: "demo" },    "Hello React",    React.createElement("input")  ),  reactContainer);\n\n_At this point, if you‚Äôre questioning what we‚Äôre doing and thinking ‚Äúthis is complicating a simple process‚Äù, you are totally right! But there is a very good reason for what we‚Äôre doing. Keep reading._\n\nLet‚Äôs also render a timestamp in both versions. In the JS version, let‚Äôs put the timestamp in a paragraph element. We can use a call to `new Date()` to display a simple timestamp:\n\njsContainer.innerHTML = \\`  \n  <div class="demo">  \n    Hello JS  \n    <input />  \n    <p>${new Date()}</p>  \n  </div>  \n\\`;\n```\nTo do the same in React, we add a 5th argument to the top-level `div` element. This new 5th argument is another `React.createElement` call, this time using a `p` tag, with no attributes, and the `new Date()` string for content:\n```\nReactDOM.render(  \n  React.createElement(  \n    "div",  \n    { className: "demo" },  \n    "Hello React",  \n    React.createElement("input"),  \n    React.createElement(  \n      "p",  \n      null,  \n      new Date().toString()  \n    )  \n  ),  \n  reactContainer  \n);\n```\nBoth JS and React versions are still rendering the exact same HTML in the browser.\n\n![](https://cdn-images-1.medium.com/max/1600/1*fLaNHWXUJh4ICEvMXByvwg.png)\n\nImage captured in¬†Chrome\n\nAs you can see, so far, using React is actually a lot harder than the simple and familiar native way. What is it that React does so well that‚Äôs worth giving up the familiar HTML and having to learn a new API to write what can be simply written in HTML? The answer is not about rendering the first HTML view, it‚Äôs about what we need to do to update any existing view in the DOM.\n\nSo, let‚Äôs do an update operation on the DOM we have so far. Let‚Äôs simply make the timestamp tick every second.\n\nWe can easily repeat a JavaScript function call in a browser using the `setInterval` Web timer API. So, let\'s put all of our DOM manipulations for both JS and React versions in a function, call it `render`, and use it in a `setInterval` call to make it repeat every second.\n\nHere‚Äôs the full final code in `script.js`:\n```\nconst jsContainer = document.getElementById("js");  \nconst reactContainer = document.getElementById("react");\n\nconst render = () => {  \n  jsContainer.innerHTML = \\`  \n    <div class="demo">  \n      Hello JS  \n      <input />  \n      <p>${new Date()}</p>  \n    </div>  \n  \\`;\n\n  ReactDOM.render(  \n    React.createElement(  \n      "div",  \n      { className: "demo" },  \n      "Hello React ",  \n      React.createElement("input"),  \n      React.createElement(  \n        "p",  \n        null,  \n        new Date().toString()  \n      )  \n    ),  \n    reactContainer  \n  );  \n}\n\nsetInterval(render, 1000);\n```\nWhen we refresh the browser now, the timestamp string should be ticking every second in both versions. We are now updating our User Interface in the DOM.\n\n_This is the moment when React will potentially blow your mind._ If you try to type something in the text box of the JS version, you won‚Äôt be able to. This is very much expected because we‚Äôre basically throwing away the whole DOM node on every tick and regenerating it. However, if you try to type something in the text box that‚Äôs rendered with React, you can certainly do so!\n\nAlthough the whole React rendering code is within our ticking timer, React is changing only the timestamp paragraph and not the whole DOM node. This is why the text input box was not regenerated and we were able to type in it.\n\nYou can see the different ways we‚Äôre updating the DOM visually if you inspect the two DOM nodes in a Chrome dev tools elements panel. The Chrome div tools highlights any HTML elements that get updated. You‚Äôll see how we are regenerating the whole ‚Äújs‚Äù div on every tick, while React is smartly only regenerating the paragraph with the timestamp string.\n\n![](https://cdn-images-1.medium.com/max/1600/1*9RGpVv6Mwjl6LApR7vsYqA.gif)\n\nImage captured in¬†Chrome\n\nReact has a smart _diffing_ algorithm that it uses to only regenerate in its DOM node what actually _needs_ to be regenerated while it keeps everything else as is. This diffing process is possible because of React‚Äôs virtual DOM and the fact that we have a representation of our User Interface in memory (because we wrote in JavaScript).\n\nUsing the virtual DOM, React keeps the last DOM version in memory and when it has a new DOM version to take to the browser, that new DOM version will also be in memory, so React can compute the difference between the new and the old versions (in our case, the difference is the timestamp paragraph).\n\nReact will then instruct the browser to update only the computed diff and not the whole DOM node. No matter how many times we regenerate our interface, React will take to the browser only the new ‚Äúpartial‚Äù updates.\n\nNot only is this method a lot more efficient, but it also removes a big layer of complexity for the way we _think_ about updating User Interfaces. Having React do all the computations about whether we should update the DOM or not enables us to focus on thinking about our data (state) and the way to describe a User Interface for it.\n\nWe then manage the updates on our data as needed without worrying about the steps needed to reflect these updates on the actual User Interface in the browser (because we know React will do exactly that and it will do that in an efficient way!)\n\nThanks for reading! You can view the source code of my demo [here](https://github.com/jscomplete/react-virtual-dom-demo/tree/master/demo), and you can see the demo running [here](https://jscomplete.github.io/react-virtual-dom-demo/demo/).\n\nfont: https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76',
    author: 'Samer Buna',
    category: 'react',
    voteScore: 64,
    deleted: false,
    commentCount: 0,
  },
  '3f9cc228-a8a3-4e5c-9f9b-8d79bee0bb7e': {
    id: '3f9cc228-a8a3-4e5c-9f9b-8d79bee0bb7e',
    timestamp: 1505185200000,
    title:
      'Everything You Wanted To Know About package-lock.json But Were Too Afraid To¬†Ask',
    summary: '',
    body:
      '### Introduction\n\nSo you‚Äôve updated Node Package Manager (npm) to v5.x.x, and everything seems to be going fine. But wait, what‚Äôs this? A new file was created automatically. _Package-lock.json_. If you open it, it looks sort of like the dependencies in package.json, but more verbose. You decide to ignore it and go along your way developing your project. Eventually, you run into problems with a dependency. It can‚Äôt be found or the wrong version seems to be installed. Most people just end up deleting the package-lock.json and running \\`npm install\\`. So why even have it? What is it supposed to do? What does it actually do?\n\n### Summary\n\n*   If you‚Äôre using npm ^5.x.x, by default a package-lock.json will be generated for you\n*   You should use package-lock to ensure a consistent install and compatible dependencies\n*   You **SHOULD** commit your package-lock to source control\n*   As of npm ^5.1.x, package.json is now able to trump package-lock.json, so you should experience much less of a headache\n*   No more deleting that package-lock just to run \\`npm install\\` and regenerate it\n*   Use semver if your app offers an API, and adhere to the rules of semver.\n\n### Background\n\n### Semantic Versioning\n\nBefore you can understand the package-lock and even package.json, you have to understand [semantic versioning (semver)](http://semver.org/). It‚Äôs the genius behind npm, and what has made it more successful. You can read more about how npm uses it [here](http://blog.npmjs.org/post/162134793605/why-use-semver). In a nutshell, if you are building an application with which other applications interface, you should communicate how the changes that you make will affect the third party‚Äôs ability to interact with your application. This is done via semantic versioning. A version is made up of three parts: X,Y,Z where those are major, minor and patch versions respectively. An example would be 1.2.3, or major version 1, minor version 2, patch 3. A change in patch represents a bugfix that doesn‚Äôt break anything. A change in minor version represents a new functionality that doesn‚Äôt break anything. A change in major version represents a large change that breaks compatibility. If users don‚Äôt adapt to a major version change, stuff won‚Äôt work.\n\n### Managing Packages\n\nnpm exists to make managing packages easy. Your projects might have hundreds of dependencies, each of those with a hundred others. To keep your mind away from dependency hell, npm was created so that with some simple commands, you could install and manage these dependencies and hardly ever have to think about them.\n\nWhen you install a package with npm (and save it), an entry is added to your package.json containing the package name, and the semver that should be used. npm supports some wildcards in this semver definition however. By default, npm installs the latest version, and prepends a caret e.g. ‚Äú^1.2.12‚Äù. This signifies that at a minimum, version 1.2.12 should be used, but any version higher than that is OK, as long as it has the same major version, 1. Since minor and patch numbers only represent bugfixes and non-breaking additions, you _should_ be safe to use any higher same-major version. Read more about semver wildcards and play with npm‚Äôs cool semver calculator [here](http://blog.npmjs.org/post/115305091285/introducing-the-npm-semantic-version-calculator).\n\n### Shared Projects\n\nThe real benefit to having dependencies defined like this in package.json, is that anybody who has access to the package.json could create a dependency folder that contains the modules needed to run your application. But let‚Äôs take a look at a specific way where things might go wrong.\n\nLet‚Äôs say we create a new project that is going to use [express](https://expressjs.com/). After running \\`npm init\\`, we install express: \\`npm install express‚Ää‚Äî‚Ääsave\\`. At the time of writing, the latest express version is 4.15.4. So ‚Äúexpress‚Äù: ‚Äú^4.15.4‚Äù is added as a dependency within my package.json and that exact version is installed on my machine. Now maybe tomorrow, the maintainers of express release a bug fix, and so the latest version becomes 4.15.5. Then if someone were to want to contribute to my project, they would clone it, and run \\`npm install.‚Äô Since 4.15.5 is a higher version with the same major version, that is installed for them. We both have express, but we have two different versions. Theoretically, they should still be compatible, but maybe that bugfix affected functionality that we are using, and our application would produce different results when run with express version 4.15.4 compared to 4.15.5.\n\n### Package-lock\n\n### The Goal\n\nThe purpose of the package-lock is to avoid the situation described above, where installing modules from the same package.json results in two different installs. Package-lock.json was added in npm version 5.x.x, so if you are using major version 5 or higher, you will see it generated unless you disabled it.\n\n### The Format\n\nPackage-lock is a large list of each dependency listed in your package.json, the specific version that should be installed, the location of the module (URI), a hash that verifies the integrity of the module, the list of packages it requires, and a list of dependencies. Let‚Äôs take a look at what the entry for express is:\n```\n"express": {  \n      "version": "4.15.4",  \n      "resolved": "https://registry.npmjs.org/express/-/express-4.15.4.tgz",  \n      "integrity": "sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=",  \n      "requires": {  \n        "accepts": "1.3.3",  \n        "array-flatten": "1.1.1",  \n        "content-disposition": "0.5.2",  \n        "content-type": "1.0.2",  \n        "cookie": "0.3.1",  \n        "cookie-signature": "1.0.6",  \n        "debug": "2.6.8",  \n        "depd": "1.1.1",  \n        "encodeurl": "1.0.1",  \n        "escape-html": "1.0.3",  \n        "etag": "1.8.0",  \n        "finalhandler": "1.0.4",  \n        "fresh": "0.5.0",  \n        "merge-descriptors": "1.0.1",  \n        "methods": "1.1.2",  \n        "on-finished": "2.3.0",  \n        "parseurl": "1.3.1",  \n        "path-to-regexp": "0.1.7",  \n        "proxy-addr": "1.1.5",  \n        "qs": "6.5.0",  \n        "range-parser": "1.2.0",  \n        "send": "0.15.4",  \n        "serve-static": "1.12.4",  \n        "setprototypeof": "1.0.3",  \n        "statuses": "1.3.1",  \n        "type-is": "1.6.15",  \n        "utils-merge": "1.0.0",  \n        "vary": "1.1.1"  \n      }  \n    },\n```\nEquivalent entries can be found for every package listed in the ‚Äúrequires‚Äù section.\n\nThe idea then becomes that instead of using package.json to resolve and install modules, npm will use the package-lock.json. Because the package-lock specifies a version, location and integrity hash for every module and each of its dependencies, the install it creates will be the same, every single time. It won‚Äôt matter what device you are on, or when in the future you install, it _should_ give you the same result every time, which is very useful.\n\n### The Controversy\n\nSo if package-lock is supposed to solve a common problem, why are the top search results for it (other than npm documentation) all about disabling it or questioning the role that it plays?\n\nBefore npm 5.x.x, package.json was the source of truth for a project. What lived in package.json was law. npm users liked this model and grew very accustomed to maintaining their package file. However, when package-lock was first introduced, it acted contrary to how many people expected it to. Given a pre-existing package and package-lock, a change to the package.json (what many users considered the source of truth) was not reflected in the package-lock.\n\n**Example:** Package A, version 1.0.0 is in the package and package-lock. In package.json, A is manually edited to version 1.1.0. If a user who considers package.json to be the source of truth runs \\`npm install\\`, they would expect version 1.1.0 to be installed. However, version 1.0.0 is installed, despite the fact that v1.1.0 is listed is the package.json.\n\n**Example:** A module does not exist in the package-lock, but it does exist in the package.json. As a user who looks to package.json as the source of truth, I would expect for my module to be installed. However since the module is not present in package-lock, it isn‚Äôt installed, and my code fails because it cannot find the module.\n\nMuch of the time, because they couldn‚Äôt figure out why their dependencies weren‚Äôt being installed correctly, users either deleted package-lock and reinstalled, or would disable the package-lock altogether.\n\nThis conflict between expect and real behavior sparked a very [interesting issue thread](https://github.com/npm/npm/issues/16866) in the npm repo. Some people thought that the package.json should be the source of truth, some people thought that since package-lock is what npm uses to create the install, that should be considered the source of truth. The resolution to this controversy lies in npm [PR #17508](https://github.com/npm/npm/pull/17508). Npm maintainers added a change that causes package.json to overrule the package-lock if package.json has been updated. Now in both above scenarios, the packages that a user would expect to be installed are installed correctly. This change was released as a part of npm v5.1.0, which went live on July 5th, 2017.\n\nfont: https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8',
    author: 'James Quigley',
    category: 'node',
    voteScore: 78,
    deleted: false,
    commentCount: 0,
  },
}
